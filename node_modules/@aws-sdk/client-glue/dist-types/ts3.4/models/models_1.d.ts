import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { GlueServiceException as __BaseException } from "./GlueServiceException";
import {
  Action,
  Blueprint,
  Column,
  ConnectionPropertyKey,
  ConnectionsList,
  ConnectionType,
  Crawler,
  CsvHeaderOption,
  CsvSerdeOption,
  DataFormat,
  DataQualityAnalyzerResult,
  DataQualityObservation,
  DataQualityRuleResult,
  DataSource,
  DevEndpoint,
  ErrorDetail,
  EventBatchingCondition,
  GlueTable,
  JobRun,
  Partition,
  PartitionInput,
  PartitionValueList,
  PhysicalConnectionRequirements,
  Predicate,
  SchemaId,
  StorageDescriptor,
  TableOptimizerConfiguration,
  TableOptimizerType,
  TaskStatusType,
  TriggerType,
  WorkerType,
} from "./models_0";
export interface CreateCustomEntityTypeResponse {
  Name?: string;
}
export declare class IdempotentParameterMismatchException extends __BaseException {
  readonly name: "IdempotentParameterMismatchException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      IdempotentParameterMismatchException,
      __BaseException
    >
  );
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare const Permission: {
  readonly ALL: "ALL";
  readonly ALTER: "ALTER";
  readonly CREATE_DATABASE: "CREATE_DATABASE";
  readonly CREATE_TABLE: "CREATE_TABLE";
  readonly DATA_LOCATION_ACCESS: "DATA_LOCATION_ACCESS";
  readonly DELETE: "DELETE";
  readonly DROP: "DROP";
  readonly INSERT: "INSERT";
  readonly SELECT: "SELECT";
};
export type Permission = (typeof Permission)[keyof typeof Permission];
export interface DataLakePrincipal {
  DataLakePrincipalIdentifier?: string;
}
export interface PrincipalPermissions {
  Principal?: DataLakePrincipal;
  Permissions?: Permission[];
}
export interface FederatedDatabase {
  Identifier?: string;
  ConnectionName?: string;
}
export interface DatabaseIdentifier {
  CatalogId?: string;
  DatabaseName?: string;
  Region?: string;
}
export interface DatabaseInput {
  Name: string | undefined;
  Description?: string;
  LocationUri?: string;
  Parameters?: Record<string, string>;
  CreateTableDefaultPermissions?: PrincipalPermissions[];
  TargetDatabase?: DatabaseIdentifier;
  FederatedDatabase?: FederatedDatabase;
}
export interface CreateDatabaseRequest {
  CatalogId?: string;
  DatabaseInput: DatabaseInput | undefined;
  Tags?: Record<string, string>;
}
export interface CreateDatabaseResponse {}
export declare class FederatedResourceAlreadyExistsException extends __BaseException {
  readonly name: "FederatedResourceAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  AssociatedGlueResource?: string;
  constructor(
    opts: __ExceptionOptionType<
      FederatedResourceAlreadyExistsException,
      __BaseException
    >
  );
}
export interface DataQualityTargetTable {
  TableName: string | undefined;
  DatabaseName: string | undefined;
  CatalogId?: string;
}
export interface CreateDataQualityRulesetRequest {
  Name: string | undefined;
  Description?: string;
  Ruleset: string | undefined;
  Tags?: Record<string, string>;
  TargetTable?: DataQualityTargetTable;
  ClientToken?: string;
}
export interface CreateDataQualityRulesetResponse {
  Name?: string;
}
export interface CreateDevEndpointRequest {
  EndpointName: string | undefined;
  RoleArn: string | undefined;
  SecurityGroupIds?: string[];
  SubnetId?: string;
  PublicKey?: string;
  PublicKeys?: string[];
  NumberOfNodes?: number;
  WorkerType?: WorkerType;
  GlueVersion?: string;
  NumberOfWorkers?: number;
  ExtraPythonLibsS3Path?: string;
  ExtraJarsS3Path?: string;
  SecurityConfiguration?: string;
  Tags?: Record<string, string>;
  Arguments?: Record<string, string>;
}
export interface CreateDevEndpointResponse {
  EndpointName?: string;
  Status?: string;
  SecurityGroupIds?: string[];
  SubnetId?: string;
  RoleArn?: string;
  YarnEndpointAddress?: string;
  ZeppelinRemoteSparkInterpreterPort?: number;
  NumberOfNodes?: number;
  WorkerType?: WorkerType;
  GlueVersion?: string;
  NumberOfWorkers?: number;
  AvailabilityZone?: string;
  VpcId?: string;
  ExtraPythonLibsS3Path?: string;
  ExtraJarsS3Path?: string;
  FailureReason?: string;
  SecurityConfiguration?: string;
  CreatedTimestamp?: Date;
  Arguments?: Record<string, string>;
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CreateJobResponse {
  Name?: string;
}
export interface FindMatchesParameters {
  PrimaryKeyColumnName?: string;
  PrecisionRecallTradeoff?: number;
  AccuracyCostTradeoff?: number;
  EnforceProvidedLabels?: boolean;
}
export declare const TransformType: {
  readonly FIND_MATCHES: "FIND_MATCHES";
};
export type TransformType = (typeof TransformType)[keyof typeof TransformType];
export interface TransformParameters {
  TransformType: TransformType | undefined;
  FindMatchesParameters?: FindMatchesParameters;
}
export declare const MLUserDataEncryptionModeString: {
  readonly DISABLED: "DISABLED";
  readonly SSEKMS: "SSE-KMS";
};
export type MLUserDataEncryptionModeString =
  (typeof MLUserDataEncryptionModeString)[keyof typeof MLUserDataEncryptionModeString];
export interface MLUserDataEncryption {
  MlUserDataEncryptionMode: MLUserDataEncryptionModeString | undefined;
  KmsKeyId?: string;
}
export interface TransformEncryption {
  MlUserDataEncryption?: MLUserDataEncryption;
  TaskRunSecurityConfigurationName?: string;
}
export interface CreateMLTransformRequest {
  Name: string | undefined;
  Description?: string;
  InputRecordTables: GlueTable[] | undefined;
  Parameters: TransformParameters | undefined;
  Role: string | undefined;
  GlueVersion?: string;
  MaxCapacity?: number;
  WorkerType?: WorkerType;
  NumberOfWorkers?: number;
  Timeout?: number;
  MaxRetries?: number;
  Tags?: Record<string, string>;
  TransformEncryption?: TransformEncryption;
}
export interface CreateMLTransformResponse {
  TransformId?: string;
}
export interface CreatePartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionInput: PartitionInput | undefined;
}
export interface CreatePartitionResponse {}
export interface PartitionIndex {
  Keys: string[] | undefined;
  IndexName: string | undefined;
}
export interface CreatePartitionIndexRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionIndex: PartitionIndex | undefined;
}
export interface CreatePartitionIndexResponse {}
export interface CreateRegistryInput {
  RegistryName: string | undefined;
  Description?: string;
  Tags?: Record<string, string>;
}
export interface CreateRegistryResponse {
  RegistryArn?: string;
  RegistryName?: string;
  Description?: string;
  Tags?: Record<string, string>;
}
export declare const Compatibility: {
  readonly BACKWARD: "BACKWARD";
  readonly BACKWARD_ALL: "BACKWARD_ALL";
  readonly DISABLED: "DISABLED";
  readonly FORWARD: "FORWARD";
  readonly FORWARD_ALL: "FORWARD_ALL";
  readonly FULL: "FULL";
  readonly FULL_ALL: "FULL_ALL";
  readonly NONE: "NONE";
};
export type Compatibility = (typeof Compatibility)[keyof typeof Compatibility];
export interface RegistryId {
  RegistryName?: string;
  RegistryArn?: string;
}
export interface CreateSchemaInput {
  RegistryId?: RegistryId;
  SchemaName: string | undefined;
  DataFormat: DataFormat | undefined;
  Compatibility?: Compatibility;
  Description?: string;
  Tags?: Record<string, string>;
  SchemaDefinition?: string;
}
export declare const SchemaStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETING: "DELETING";
  readonly PENDING: "PENDING";
};
export type SchemaStatus = (typeof SchemaStatus)[keyof typeof SchemaStatus];
export declare const SchemaVersionStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETING: "DELETING";
  readonly FAILURE: "FAILURE";
  readonly PENDING: "PENDING";
};
export type SchemaVersionStatus =
  (typeof SchemaVersionStatus)[keyof typeof SchemaVersionStatus];
export interface CreateSchemaResponse {
  RegistryName?: string;
  RegistryArn?: string;
  SchemaName?: string;
  SchemaArn?: string;
  Description?: string;
  DataFormat?: DataFormat;
  Compatibility?: Compatibility;
  SchemaCheckpoint?: number;
  LatestSchemaVersion?: number;
  NextSchemaVersion?: number;
  SchemaStatus?: SchemaStatus;
  Tags?: Record<string, string>;
  SchemaVersionId?: string;
  SchemaVersionStatus?: SchemaVersionStatus;
}
export interface CodeGenEdge {
  Source: string | undefined;
  Target: string | undefined;
  TargetParameter?: string;
}
export interface CodeGenNodeArg {
  Name: string | undefined;
  Value: string | undefined;
  Param?: boolean;
}
export interface CodeGenNode {
  Id: string | undefined;
  NodeType: string | undefined;
  Args: CodeGenNodeArg[] | undefined;
  LineNumber?: number;
}
export declare const Language: {
  readonly PYTHON: "PYTHON";
  readonly SCALA: "SCALA";
};
export type Language = (typeof Language)[keyof typeof Language];
export interface CreateScriptRequest {
  DagNodes?: CodeGenNode[];
  DagEdges?: CodeGenEdge[];
  Language?: Language;
}
export interface CreateScriptResponse {
  PythonScript?: string;
  ScalaCode?: string;
}
export declare const CloudWatchEncryptionMode: {
  readonly DISABLED: "DISABLED";
  readonly SSEKMS: "SSE-KMS";
};
export type CloudWatchEncryptionMode =
  (typeof CloudWatchEncryptionMode)[keyof typeof CloudWatchEncryptionMode];
export interface CloudWatchEncryption {
  CloudWatchEncryptionMode?: CloudWatchEncryptionMode;
  KmsKeyArn?: string;
}
export declare const JobBookmarksEncryptionMode: {
  readonly CSEKMS: "CSE-KMS";
  readonly DISABLED: "DISABLED";
};
export type JobBookmarksEncryptionMode =
  (typeof JobBookmarksEncryptionMode)[keyof typeof JobBookmarksEncryptionMode];
export interface JobBookmarksEncryption {
  JobBookmarksEncryptionMode?: JobBookmarksEncryptionMode;
  KmsKeyArn?: string;
}
export declare const S3EncryptionMode: {
  readonly DISABLED: "DISABLED";
  readonly SSEKMS: "SSE-KMS";
  readonly SSES3: "SSE-S3";
};
export type S3EncryptionMode =
  (typeof S3EncryptionMode)[keyof typeof S3EncryptionMode];
export interface S3Encryption {
  S3EncryptionMode?: S3EncryptionMode;
  KmsKeyArn?: string;
}
export interface EncryptionConfiguration {
  S3Encryption?: S3Encryption[];
  CloudWatchEncryption?: CloudWatchEncryption;
  JobBookmarksEncryption?: JobBookmarksEncryption;
}
export interface CreateSecurityConfigurationRequest {
  Name: string | undefined;
  EncryptionConfiguration: EncryptionConfiguration | undefined;
}
export interface CreateSecurityConfigurationResponse {
  Name?: string;
  CreatedTimestamp?: Date;
}
export interface SessionCommand {
  Name?: string;
  PythonVersion?: string;
}
export interface CreateSessionRequest {
  Id: string | undefined;
  Description?: string;
  Role: string | undefined;
  Command: SessionCommand | undefined;
  Timeout?: number;
  IdleTimeout?: number;
  DefaultArguments?: Record<string, string>;
  Connections?: ConnectionsList;
  MaxCapacity?: number;
  NumberOfWorkers?: number;
  WorkerType?: WorkerType;
  SecurityConfiguration?: string;
  GlueVersion?: string;
  Tags?: Record<string, string>;
  RequestOrigin?: string;
}
export declare const SessionStatus: {
  readonly FAILED: "FAILED";
  readonly PROVISIONING: "PROVISIONING";
  readonly READY: "READY";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly TIMEOUT: "TIMEOUT";
};
export type SessionStatus = (typeof SessionStatus)[keyof typeof SessionStatus];
export interface Session {
  Id?: string;
  CreatedOn?: Date;
  Status?: SessionStatus;
  ErrorMessage?: string;
  Description?: string;
  Role?: string;
  Command?: SessionCommand;
  DefaultArguments?: Record<string, string>;
  Connections?: ConnectionsList;
  Progress?: number;
  MaxCapacity?: number;
  SecurityConfiguration?: string;
  GlueVersion?: string;
  NumberOfWorkers?: number;
  WorkerType?: WorkerType;
  CompletedOn?: Date;
  ExecutionTime?: number;
  DPUSeconds?: number;
  IdleTimeout?: number;
}
export interface CreateSessionResponse {
  Session?: Session;
}
export declare const MetadataOperation: {
  readonly CREATE: "CREATE";
};
export type MetadataOperation =
  (typeof MetadataOperation)[keyof typeof MetadataOperation];
export interface IcebergInput {
  MetadataOperation: MetadataOperation | undefined;
  Version?: string;
}
export interface OpenTableFormatInput {
  IcebergInput?: IcebergInput;
}
export interface TableIdentifier {
  CatalogId?: string;
  DatabaseName?: string;
  Name?: string;
  Region?: string;
}
export interface TableInput {
  Name: string | undefined;
  Description?: string;
  Owner?: string;
  LastAccessTime?: Date;
  LastAnalyzedTime?: Date;
  Retention?: number;
  StorageDescriptor?: StorageDescriptor;
  PartitionKeys?: Column[];
  ViewOriginalText?: string;
  ViewExpandedText?: string;
  TableType?: string;
  Parameters?: Record<string, string>;
  TargetTable?: TableIdentifier;
}
export interface CreateTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableInput: TableInput | undefined;
  PartitionIndexes?: PartitionIndex[];
  TransactionId?: string;
  OpenTableFormatInput?: OpenTableFormatInput;
}
export interface CreateTableResponse {}
export interface CreateTableOptimizerRequest {
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Type: TableOptimizerType | undefined;
  TableOptimizerConfiguration: TableOptimizerConfiguration | undefined;
}
export interface CreateTableOptimizerResponse {}
export interface CreateTriggerRequest {
  Name: string | undefined;
  WorkflowName?: string;
  Type: TriggerType | undefined;
  Schedule?: string;
  Predicate?: Predicate;
  Actions: Action[] | undefined;
  Description?: string;
  StartOnCreation?: boolean;
  Tags?: Record<string, string>;
  EventBatchingCondition?: EventBatchingCondition;
}
export interface CreateTriggerResponse {
  Name?: string;
}
export declare const PrincipalType: {
  readonly GROUP: "GROUP";
  readonly ROLE: "ROLE";
  readonly USER: "USER";
};
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export declare const ResourceType: {
  readonly ARCHIVE: "ARCHIVE";
  readonly FILE: "FILE";
  readonly JAR: "JAR";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export interface ResourceUri {
  ResourceType?: ResourceType;
  Uri?: string;
}
export interface UserDefinedFunctionInput {
  FunctionName?: string;
  ClassName?: string;
  OwnerName?: string;
  OwnerType?: PrincipalType;
  ResourceUris?: ResourceUri[];
}
export interface CreateUserDefinedFunctionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  FunctionInput: UserDefinedFunctionInput | undefined;
}
export interface CreateUserDefinedFunctionResponse {}
export interface CreateWorkflowRequest {
  Name: string | undefined;
  Description?: string;
  DefaultRunProperties?: Record<string, string>;
  Tags?: Record<string, string>;
  MaxConcurrentRuns?: number;
}
export interface CreateWorkflowResponse {
  Name?: string;
}
export interface DeleteBlueprintRequest {
  Name: string | undefined;
}
export interface DeleteBlueprintResponse {
  Name?: string;
}
export interface DeleteClassifierRequest {
  Name: string | undefined;
}
export interface DeleteClassifierResponse {}
export interface DeleteColumnStatisticsForPartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionValues: string[] | undefined;
  ColumnName: string | undefined;
}
export interface DeleteColumnStatisticsForPartitionResponse {}
export interface DeleteColumnStatisticsForTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  ColumnName: string | undefined;
}
export interface DeleteColumnStatisticsForTableResponse {}
export interface DeleteConnectionRequest {
  CatalogId?: string;
  ConnectionName: string | undefined;
}
export interface DeleteConnectionResponse {}
export declare class CrawlerRunningException extends __BaseException {
  readonly name: "CrawlerRunningException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<CrawlerRunningException, __BaseException>
  );
}
export interface DeleteCrawlerRequest {
  Name: string | undefined;
}
export interface DeleteCrawlerResponse {}
export declare class SchedulerTransitioningException extends __BaseException {
  readonly name: "SchedulerTransitioningException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      SchedulerTransitioningException,
      __BaseException
    >
  );
}
export interface DeleteCustomEntityTypeRequest {
  Name: string | undefined;
}
export interface DeleteCustomEntityTypeResponse {
  Name?: string;
}
export interface DeleteDatabaseRequest {
  CatalogId?: string;
  Name: string | undefined;
}
export interface DeleteDatabaseResponse {}
export interface DeleteDataQualityRulesetRequest {
  Name: string | undefined;
}
export interface DeleteDataQualityRulesetResponse {}
export interface DeleteDevEndpointRequest {
  EndpointName: string | undefined;
}
export interface DeleteDevEndpointResponse {}
export interface DeleteJobRequest {
  JobName: string | undefined;
}
export interface DeleteJobResponse {
  JobName?: string;
}
export interface DeleteMLTransformRequest {
  TransformId: string | undefined;
}
export interface DeleteMLTransformResponse {
  TransformId?: string;
}
export interface DeletePartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionValues: string[] | undefined;
}
export interface DeletePartitionResponse {}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeletePartitionIndexRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  IndexName: string | undefined;
}
export interface DeletePartitionIndexResponse {}
export interface DeleteRegistryInput {
  RegistryId: RegistryId | undefined;
}
export declare const RegistryStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETING: "DELETING";
};
export type RegistryStatus =
  (typeof RegistryStatus)[keyof typeof RegistryStatus];
export interface DeleteRegistryResponse {
  RegistryName?: string;
  RegistryArn?: string;
  Status?: RegistryStatus;
}
export declare class ConditionCheckFailureException extends __BaseException {
  readonly name: "ConditionCheckFailureException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ConditionCheckFailureException, __BaseException>
  );
}
export interface DeleteResourcePolicyRequest {
  PolicyHashCondition?: string;
  ResourceArn?: string;
}
export interface DeleteResourcePolicyResponse {}
export interface DeleteSchemaInput {
  SchemaId: SchemaId | undefined;
}
export interface DeleteSchemaResponse {
  SchemaArn?: string;
  SchemaName?: string;
  Status?: SchemaStatus;
}
export interface DeleteSchemaVersionsInput {
  SchemaId: SchemaId | undefined;
  Versions: string | undefined;
}
export interface ErrorDetails {
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface SchemaVersionErrorItem {
  VersionNumber?: number;
  ErrorDetails?: ErrorDetails;
}
export interface DeleteSchemaVersionsResponse {
  SchemaVersionErrors?: SchemaVersionErrorItem[];
}
export interface DeleteSecurityConfigurationRequest {
  Name: string | undefined;
}
export interface DeleteSecurityConfigurationResponse {}
export interface DeleteSessionRequest {
  Id: string | undefined;
  RequestOrigin?: string;
}
export interface DeleteSessionResponse {
  Id?: string;
}
export interface DeleteTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  Name: string | undefined;
  TransactionId?: string;
}
export interface DeleteTableResponse {}
export interface DeleteTableOptimizerRequest {
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Type: TableOptimizerType | undefined;
}
export interface DeleteTableOptimizerResponse {}
export interface DeleteTableVersionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  VersionId: string | undefined;
}
export interface DeleteTableVersionResponse {}
export interface DeleteTriggerRequest {
  Name: string | undefined;
}
export interface DeleteTriggerResponse {
  Name?: string;
}
export interface DeleteUserDefinedFunctionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  FunctionName: string | undefined;
}
export interface DeleteUserDefinedFunctionResponse {}
export interface DeleteWorkflowRequest {
  Name: string | undefined;
}
export interface DeleteWorkflowResponse {
  Name?: string;
}
export interface GetBlueprintRequest {
  Name: string | undefined;
  IncludeBlueprint?: boolean;
  IncludeParameterSpec?: boolean;
}
export interface GetBlueprintResponse {
  Blueprint?: Blueprint;
}
export interface GetBlueprintRunRequest {
  BlueprintName: string | undefined;
  RunId: string | undefined;
}
export declare const BlueprintRunState: {
  readonly FAILED: "FAILED";
  readonly ROLLING_BACK: "ROLLING_BACK";
  readonly RUNNING: "RUNNING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type BlueprintRunState =
  (typeof BlueprintRunState)[keyof typeof BlueprintRunState];
export interface BlueprintRun {
  BlueprintName?: string;
  RunId?: string;
  WorkflowName?: string;
  State?: BlueprintRunState;
  StartedOn?: Date;
  CompletedOn?: Date;
  ErrorMessage?: string;
  RollbackErrorMessage?: string;
  Parameters?: string;
  RoleArn?: string;
}
export interface GetBlueprintRunResponse {
  BlueprintRun?: BlueprintRun;
}
export interface GetBlueprintRunsRequest {
  BlueprintName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetBlueprintRunsResponse {
  BlueprintRuns?: BlueprintRun[];
  NextToken?: string;
}
export interface GetCatalogImportStatusRequest {
  CatalogId?: string;
}
export interface CatalogImportStatus {
  ImportCompleted?: boolean;
  ImportTime?: Date;
  ImportedBy?: string;
}
export interface GetCatalogImportStatusResponse {
  ImportStatus?: CatalogImportStatus;
}
export interface GetClassifierRequest {
  Name: string | undefined;
}
export interface CsvClassifier {
  Name: string | undefined;
  CreationTime?: Date;
  LastUpdated?: Date;
  Version?: number;
  Delimiter?: string;
  QuoteSymbol?: string;
  ContainsHeader?: CsvHeaderOption;
  Header?: string[];
  DisableValueTrimming?: boolean;
  AllowSingleColumn?: boolean;
  CustomDatatypeConfigured?: boolean;
  CustomDatatypes?: string[];
  Serde?: CsvSerdeOption;
}
export interface GrokClassifier {
  Name: string | undefined;
  Classification: string | undefined;
  CreationTime?: Date;
  LastUpdated?: Date;
  Version?: number;
  GrokPattern: string | undefined;
  CustomPatterns?: string;
}
export interface JsonClassifier {
  Name: string | undefined;
  CreationTime?: Date;
  LastUpdated?: Date;
  Version?: number;
  JsonPath: string | undefined;
}
export interface XMLClassifier {
  Name: string | undefined;
  Classification: string | undefined;
  CreationTime?: Date;
  LastUpdated?: Date;
  Version?: number;
  RowTag?: string;
}
export interface Classifier {
  GrokClassifier?: GrokClassifier;
  XMLClassifier?: XMLClassifier;
  JsonClassifier?: JsonClassifier;
  CsvClassifier?: CsvClassifier;
}
export interface GetClassifierResponse {
  Classifier?: Classifier;
}
export interface GetClassifiersRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface GetClassifiersResponse {
  Classifiers?: Classifier[];
  NextToken?: string;
}
export interface GetColumnStatisticsForPartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionValues: string[] | undefined;
  ColumnNames: string[] | undefined;
}
export interface BinaryColumnStatisticsData {
  MaximumLength: number | undefined;
  AverageLength: number | undefined;
  NumberOfNulls: number | undefined;
}
export interface BooleanColumnStatisticsData {
  NumberOfTrues: number | undefined;
  NumberOfFalses: number | undefined;
  NumberOfNulls: number | undefined;
}
export interface DateColumnStatisticsData {
  MinimumValue?: Date;
  MaximumValue?: Date;
  NumberOfNulls: number | undefined;
  NumberOfDistinctValues: number | undefined;
}
export interface DecimalNumber {
  UnscaledValue: Uint8Array | undefined;
  Scale: number | undefined;
}
export interface DecimalColumnStatisticsData {
  MinimumValue?: DecimalNumber;
  MaximumValue?: DecimalNumber;
  NumberOfNulls: number | undefined;
  NumberOfDistinctValues: number | undefined;
}
export interface DoubleColumnStatisticsData {
  MinimumValue?: number;
  MaximumValue?: number;
  NumberOfNulls: number | undefined;
  NumberOfDistinctValues: number | undefined;
}
export interface LongColumnStatisticsData {
  MinimumValue?: number;
  MaximumValue?: number;
  NumberOfNulls: number | undefined;
  NumberOfDistinctValues: number | undefined;
}
export interface StringColumnStatisticsData {
  MaximumLength: number | undefined;
  AverageLength: number | undefined;
  NumberOfNulls: number | undefined;
  NumberOfDistinctValues: number | undefined;
}
export declare const ColumnStatisticsType: {
  readonly BINARY: "BINARY";
  readonly BOOLEAN: "BOOLEAN";
  readonly DATE: "DATE";
  readonly DECIMAL: "DECIMAL";
  readonly DOUBLE: "DOUBLE";
  readonly LONG: "LONG";
  readonly STRING: "STRING";
};
export type ColumnStatisticsType =
  (typeof ColumnStatisticsType)[keyof typeof ColumnStatisticsType];
export interface ColumnStatisticsData {
  Type: ColumnStatisticsType | undefined;
  BooleanColumnStatisticsData?: BooleanColumnStatisticsData;
  DateColumnStatisticsData?: DateColumnStatisticsData;
  DecimalColumnStatisticsData?: DecimalColumnStatisticsData;
  DoubleColumnStatisticsData?: DoubleColumnStatisticsData;
  LongColumnStatisticsData?: LongColumnStatisticsData;
  StringColumnStatisticsData?: StringColumnStatisticsData;
  BinaryColumnStatisticsData?: BinaryColumnStatisticsData;
}
export interface ColumnStatistics {
  ColumnName: string | undefined;
  ColumnType: string | undefined;
  AnalyzedTime: Date | undefined;
  StatisticsData: ColumnStatisticsData | undefined;
}
export interface ColumnError {
  ColumnName?: string;
  Error?: ErrorDetail;
}
export interface GetColumnStatisticsForPartitionResponse {
  ColumnStatisticsList?: ColumnStatistics[];
  Errors?: ColumnError[];
}
export interface GetColumnStatisticsForTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  ColumnNames: string[] | undefined;
}
export interface GetColumnStatisticsForTableResponse {
  ColumnStatisticsList?: ColumnStatistics[];
  Errors?: ColumnError[];
}
export interface GetColumnStatisticsTaskRunRequest {
  ColumnStatisticsTaskRunId: string | undefined;
}
export declare const ColumnStatisticsState: {
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type ColumnStatisticsState =
  (typeof ColumnStatisticsState)[keyof typeof ColumnStatisticsState];
export interface ColumnStatisticsTaskRun {
  CustomerId?: string;
  ColumnStatisticsTaskRunId?: string;
  DatabaseName?: string;
  TableName?: string;
  ColumnNameList?: string[];
  CatalogID?: string;
  Role?: string;
  SampleSize?: number;
  SecurityConfiguration?: string;
  NumberOfWorkers?: number;
  WorkerType?: string;
  Status?: ColumnStatisticsState;
  CreationTime?: Date;
  LastUpdated?: Date;
  StartTime?: Date;
  EndTime?: Date;
  ErrorMessage?: string;
  DPUSeconds?: number;
}
export interface GetColumnStatisticsTaskRunResponse {
  ColumnStatisticsTaskRun?: ColumnStatisticsTaskRun;
}
export interface GetColumnStatisticsTaskRunsRequest {
  DatabaseName: string | undefined;
  TableName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetColumnStatisticsTaskRunsResponse {
  ColumnStatisticsTaskRuns?: ColumnStatisticsTaskRun[];
  NextToken?: string;
}
export interface GetConnectionRequest {
  CatalogId?: string;
  Name: string | undefined;
  HidePassword?: boolean;
}
export interface Connection {
  Name?: string;
  Description?: string;
  ConnectionType?: ConnectionType;
  MatchCriteria?: string[];
  ConnectionProperties?: Partial<Record<ConnectionPropertyKey, string>>;
  PhysicalConnectionRequirements?: PhysicalConnectionRequirements;
  CreationTime?: Date;
  LastUpdatedTime?: Date;
  LastUpdatedBy?: string;
}
export interface GetConnectionResponse {
  Connection?: Connection;
}
export interface GetConnectionsFilter {
  MatchCriteria?: string[];
  ConnectionType?: ConnectionType;
}
export interface GetConnectionsRequest {
  CatalogId?: string;
  Filter?: GetConnectionsFilter;
  HidePassword?: boolean;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetConnectionsResponse {
  ConnectionList?: Connection[];
  NextToken?: string;
}
export interface GetCrawlerRequest {
  Name: string | undefined;
}
export interface GetCrawlerResponse {
  Crawler?: Crawler;
}
export interface GetCrawlerMetricsRequest {
  CrawlerNameList?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface CrawlerMetrics {
  CrawlerName?: string;
  TimeLeftSeconds?: number;
  StillEstimating?: boolean;
  LastRuntimeSeconds?: number;
  MedianRuntimeSeconds?: number;
  TablesCreated?: number;
  TablesUpdated?: number;
  TablesDeleted?: number;
}
export interface GetCrawlerMetricsResponse {
  CrawlerMetricsList?: CrawlerMetrics[];
  NextToken?: string;
}
export interface GetCrawlersRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface GetCrawlersResponse {
  Crawlers?: Crawler[];
  NextToken?: string;
}
export interface GetCustomEntityTypeRequest {
  Name: string | undefined;
}
export interface GetCustomEntityTypeResponse {
  Name?: string;
  RegexString?: string;
  ContextWords?: string[];
}
export interface GetDatabaseRequest {
  CatalogId?: string;
  Name: string | undefined;
}
export interface Database {
  Name: string | undefined;
  Description?: string;
  LocationUri?: string;
  Parameters?: Record<string, string>;
  CreateTime?: Date;
  CreateTableDefaultPermissions?: PrincipalPermissions[];
  TargetDatabase?: DatabaseIdentifier;
  CatalogId?: string;
  FederatedDatabase?: FederatedDatabase;
}
export interface GetDatabaseResponse {
  Database?: Database;
}
export declare const ResourceShareType: {
  readonly ALL: "ALL";
  readonly FEDERATED: "FEDERATED";
  readonly FOREIGN: "FOREIGN";
};
export type ResourceShareType =
  (typeof ResourceShareType)[keyof typeof ResourceShareType];
export interface GetDatabasesRequest {
  CatalogId?: string;
  NextToken?: string;
  MaxResults?: number;
  ResourceShareType?: ResourceShareType;
}
export interface GetDatabasesResponse {
  DatabaseList: Database[] | undefined;
  NextToken?: string;
}
export interface GetDataCatalogEncryptionSettingsRequest {
  CatalogId?: string;
}
export interface ConnectionPasswordEncryption {
  ReturnConnectionPasswordEncrypted: boolean | undefined;
  AwsKmsKeyId?: string;
}
export declare const CatalogEncryptionMode: {
  readonly DISABLED: "DISABLED";
  readonly SSEKMS: "SSE-KMS";
};
export type CatalogEncryptionMode =
  (typeof CatalogEncryptionMode)[keyof typeof CatalogEncryptionMode];
export interface EncryptionAtRest {
  CatalogEncryptionMode: CatalogEncryptionMode | undefined;
  SseAwsKmsKeyId?: string;
}
export interface DataCatalogEncryptionSettings {
  EncryptionAtRest?: EncryptionAtRest;
  ConnectionPasswordEncryption?: ConnectionPasswordEncryption;
}
export interface GetDataCatalogEncryptionSettingsResponse {
  DataCatalogEncryptionSettings?: DataCatalogEncryptionSettings;
}
export interface GetDataflowGraphRequest {
  PythonScript?: string;
}
export interface GetDataflowGraphResponse {
  DagNodes?: CodeGenNode[];
  DagEdges?: CodeGenEdge[];
}
export interface GetDataQualityResultRequest {
  ResultId: string | undefined;
}
export interface GetDataQualityResultResponse {
  ResultId?: string;
  Score?: number;
  DataSource?: DataSource;
  RulesetName?: string;
  EvaluationContext?: string;
  StartedOn?: Date;
  CompletedOn?: Date;
  JobName?: string;
  JobRunId?: string;
  RulesetEvaluationRunId?: string;
  RuleResults?: DataQualityRuleResult[];
  AnalyzerResults?: DataQualityAnalyzerResult[];
  Observations?: DataQualityObservation[];
}
export interface GetDataQualityRuleRecommendationRunRequest {
  RunId: string | undefined;
}
export interface GetDataQualityRuleRecommendationRunResponse {
  RunId?: string;
  DataSource?: DataSource;
  Role?: string;
  NumberOfWorkers?: number;
  Timeout?: number;
  Status?: TaskStatusType;
  ErrorString?: string;
  StartedOn?: Date;
  LastModifiedOn?: Date;
  CompletedOn?: Date;
  ExecutionTime?: number;
  RecommendedRuleset?: string;
  CreatedRulesetName?: string;
}
export interface GetDataQualityRulesetRequest {
  Name: string | undefined;
}
export interface GetDataQualityRulesetResponse {
  Name?: string;
  Description?: string;
  Ruleset?: string;
  TargetTable?: DataQualityTargetTable;
  CreatedOn?: Date;
  LastModifiedOn?: Date;
  RecommendationRunId?: string;
}
export interface GetDataQualityRulesetEvaluationRunRequest {
  RunId: string | undefined;
}
export interface DataQualityEvaluationRunAdditionalRunOptions {
  CloudWatchMetricsEnabled?: boolean;
  ResultsS3Prefix?: string;
}
export interface GetDataQualityRulesetEvaluationRunResponse {
  RunId?: string;
  DataSource?: DataSource;
  Role?: string;
  NumberOfWorkers?: number;
  Timeout?: number;
  AdditionalRunOptions?: DataQualityEvaluationRunAdditionalRunOptions;
  Status?: TaskStatusType;
  ErrorString?: string;
  StartedOn?: Date;
  LastModifiedOn?: Date;
  CompletedOn?: Date;
  ExecutionTime?: number;
  RulesetNames?: string[];
  ResultIds?: string[];
  AdditionalDataSources?: Record<string, DataSource>;
}
export interface GetDevEndpointRequest {
  EndpointName: string | undefined;
}
export interface GetDevEndpointResponse {
  DevEndpoint?: DevEndpoint;
}
export interface GetDevEndpointsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface GetDevEndpointsResponse {
  DevEndpoints?: DevEndpoint[];
  NextToken?: string;
}
export interface GetJobRequest {
  JobName: string | undefined;
}
export interface GetJobBookmarkRequest {
  JobName: string | undefined;
  RunId?: string;
}
export interface JobBookmarkEntry {
  JobName?: string;
  Version?: number;
  Run?: number;
  Attempt?: number;
  PreviousRunId?: string;
  RunId?: string;
  JobBookmark?: string;
}
export interface GetJobBookmarkResponse {
  JobBookmarkEntry?: JobBookmarkEntry;
}
export interface GetJobRunRequest {
  JobName: string | undefined;
  RunId: string | undefined;
  PredecessorsIncluded?: boolean;
}
export interface GetJobRunResponse {
  JobRun?: JobRun;
}
export interface GetJobRunsRequest {
  JobName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetJobRunsResponse {
  JobRuns?: JobRun[];
  NextToken?: string;
}
export interface GetJobsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface Location {
  Jdbc?: CodeGenNodeArg[];
  S3?: CodeGenNodeArg[];
  DynamoDB?: CodeGenNodeArg[];
}
export interface CatalogEntry {
  DatabaseName: string | undefined;
  TableName: string | undefined;
}
export interface GetMappingRequest {
  Source: CatalogEntry | undefined;
  Sinks?: CatalogEntry[];
  Location?: Location;
}
export interface MappingEntry {
  SourceTable?: string;
  SourcePath?: string;
  SourceType?: string;
  TargetTable?: string;
  TargetPath?: string;
  TargetType?: string;
}
export interface GetMappingResponse {
  Mapping: MappingEntry[] | undefined;
}
export interface GetMLTaskRunRequest {
  TransformId: string | undefined;
  TaskRunId: string | undefined;
}
export interface ExportLabelsTaskRunProperties {
  OutputS3Path?: string;
}
export interface FindMatchesTaskRunProperties {
  JobId?: string;
  JobName?: string;
  JobRunId?: string;
}
export interface ImportLabelsTaskRunProperties {
  InputS3Path?: string;
  Replace?: boolean;
}
export interface LabelingSetGenerationTaskRunProperties {
  OutputS3Path?: string;
}
export declare const TaskType: {
  readonly EVALUATION: "EVALUATION";
  readonly EXPORT_LABELS: "EXPORT_LABELS";
  readonly FIND_MATCHES: "FIND_MATCHES";
  readonly IMPORT_LABELS: "IMPORT_LABELS";
  readonly LABELING_SET_GENERATION: "LABELING_SET_GENERATION";
};
export type TaskType = (typeof TaskType)[keyof typeof TaskType];
export interface TaskRunProperties {
  TaskType?: TaskType;
  ImportLabelsTaskRunProperties?: ImportLabelsTaskRunProperties;
  ExportLabelsTaskRunProperties?: ExportLabelsTaskRunProperties;
  LabelingSetGenerationTaskRunProperties?: LabelingSetGenerationTaskRunProperties;
  FindMatchesTaskRunProperties?: FindMatchesTaskRunProperties;
}
export interface GetMLTaskRunResponse {
  TransformId?: string;
  TaskRunId?: string;
  Status?: TaskStatusType;
  LogGroupName?: string;
  Properties?: TaskRunProperties;
  ErrorString?: string;
  StartedOn?: Date;
  LastModifiedOn?: Date;
  CompletedOn?: Date;
  ExecutionTime?: number;
}
export interface TaskRunFilterCriteria {
  TaskRunType?: TaskType;
  Status?: TaskStatusType;
  StartedBefore?: Date;
  StartedAfter?: Date;
}
export declare const TaskRunSortColumnType: {
  readonly STARTED: "STARTED";
  readonly STATUS: "STATUS";
  readonly TASK_RUN_TYPE: "TASK_RUN_TYPE";
};
export type TaskRunSortColumnType =
  (typeof TaskRunSortColumnType)[keyof typeof TaskRunSortColumnType];
export declare const SortDirectionType: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortDirectionType =
  (typeof SortDirectionType)[keyof typeof SortDirectionType];
export interface TaskRunSortCriteria {
  Column: TaskRunSortColumnType | undefined;
  SortDirection: SortDirectionType | undefined;
}
export interface GetMLTaskRunsRequest {
  TransformId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  Filter?: TaskRunFilterCriteria;
  Sort?: TaskRunSortCriteria;
}
export interface TaskRun {
  TransformId?: string;
  TaskRunId?: string;
  Status?: TaskStatusType;
  LogGroupName?: string;
  Properties?: TaskRunProperties;
  ErrorString?: string;
  StartedOn?: Date;
  LastModifiedOn?: Date;
  CompletedOn?: Date;
  ExecutionTime?: number;
}
export interface GetMLTaskRunsResponse {
  TaskRuns?: TaskRun[];
  NextToken?: string;
}
export interface GetMLTransformRequest {
  TransformId: string | undefined;
}
export interface ColumnImportance {
  ColumnName?: string;
  Importance?: number;
}
export interface ConfusionMatrix {
  NumTruePositives?: number;
  NumFalsePositives?: number;
  NumTrueNegatives?: number;
  NumFalseNegatives?: number;
}
export interface FindMatchesMetrics {
  AreaUnderPRCurve?: number;
  Precision?: number;
  Recall?: number;
  F1?: number;
  ConfusionMatrix?: ConfusionMatrix;
  ColumnImportances?: ColumnImportance[];
}
export interface EvaluationMetrics {
  TransformType: TransformType | undefined;
  FindMatchesMetrics?: FindMatchesMetrics;
}
export interface SchemaColumn {
  Name?: string;
  DataType?: string;
}
export declare const TransformStatusType: {
  readonly DELETING: "DELETING";
  readonly NOT_READY: "NOT_READY";
  readonly READY: "READY";
};
export type TransformStatusType =
  (typeof TransformStatusType)[keyof typeof TransformStatusType];
export interface GetMLTransformResponse {
  TransformId?: string;
  Name?: string;
  Description?: string;
  Status?: TransformStatusType;
  CreatedOn?: Date;
  LastModifiedOn?: Date;
  InputRecordTables?: GlueTable[];
  Parameters?: TransformParameters;
  EvaluationMetrics?: EvaluationMetrics;
  LabelCount?: number;
  Schema?: SchemaColumn[];
  Role?: string;
  GlueVersion?: string;
  MaxCapacity?: number;
  WorkerType?: WorkerType;
  NumberOfWorkers?: number;
  Timeout?: number;
  MaxRetries?: number;
  TransformEncryption?: TransformEncryption;
}
export interface TransformFilterCriteria {
  Name?: string;
  TransformType?: TransformType;
  Status?: TransformStatusType;
  GlueVersion?: string;
  CreatedBefore?: Date;
  CreatedAfter?: Date;
  LastModifiedBefore?: Date;
  LastModifiedAfter?: Date;
  Schema?: SchemaColumn[];
}
export declare const TransformSortColumnType: {
  readonly CREATED: "CREATED";
  readonly LAST_MODIFIED: "LAST_MODIFIED";
  readonly NAME: "NAME";
  readonly STATUS: "STATUS";
  readonly TRANSFORM_TYPE: "TRANSFORM_TYPE";
};
export type TransformSortColumnType =
  (typeof TransformSortColumnType)[keyof typeof TransformSortColumnType];
export interface TransformSortCriteria {
  Column: TransformSortColumnType | undefined;
  SortDirection: SortDirectionType | undefined;
}
export interface GetMLTransformsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filter?: TransformFilterCriteria;
  Sort?: TransformSortCriteria;
}
export interface MLTransform {
  TransformId?: string;
  Name?: string;
  Description?: string;
  Status?: TransformStatusType;
  CreatedOn?: Date;
  LastModifiedOn?: Date;
  InputRecordTables?: GlueTable[];
  Parameters?: TransformParameters;
  EvaluationMetrics?: EvaluationMetrics;
  LabelCount?: number;
  Schema?: SchemaColumn[];
  Role?: string;
  GlueVersion?: string;
  MaxCapacity?: number;
  WorkerType?: WorkerType;
  NumberOfWorkers?: number;
  Timeout?: number;
  MaxRetries?: number;
  TransformEncryption?: TransformEncryption;
}
export interface GetMLTransformsResponse {
  Transforms: MLTransform[] | undefined;
  NextToken?: string;
}
export interface GetPartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionValues: string[] | undefined;
}
export interface GetPartitionResponse {
  Partition?: Partition;
}
export interface GetPartitionIndexesRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  NextToken?: string;
}
export declare const BackfillErrorCode: {
  readonly ENCRYPTED_PARTITION_ERROR: "ENCRYPTED_PARTITION_ERROR";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly INVALID_PARTITION_TYPE_DATA_ERROR: "INVALID_PARTITION_TYPE_DATA_ERROR";
  readonly MISSING_PARTITION_VALUE_ERROR: "MISSING_PARTITION_VALUE_ERROR";
  readonly UNSUPPORTED_PARTITION_CHARACTER_ERROR: "UNSUPPORTED_PARTITION_CHARACTER_ERROR";
};
export type BackfillErrorCode =
  (typeof BackfillErrorCode)[keyof typeof BackfillErrorCode];
export interface BackfillError {
  Code?: BackfillErrorCode;
  Partitions?: PartitionValueList[];
}
export declare const PartitionIndexStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
};
export type PartitionIndexStatus =
  (typeof PartitionIndexStatus)[keyof typeof PartitionIndexStatus];
export interface KeySchemaElement {
  Name: string | undefined;
  Type: string | undefined;
}
export interface PartitionIndexDescriptor {
  IndexName: string | undefined;
  Keys: KeySchemaElement[] | undefined;
  IndexStatus: PartitionIndexStatus | undefined;
  BackfillErrors?: BackfillError[];
}
export interface GetPartitionIndexesResponse {
  PartitionIndexDescriptorList?: PartitionIndexDescriptor[];
  NextToken?: string;
}
export interface Segment {
  SegmentNumber: number | undefined;
  TotalSegments: number | undefined;
}
export interface GetPartitionsRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Expression?: string;
  NextToken?: string;
  Segment?: Segment;
  MaxResults?: number;
  ExcludeColumnSchema?: boolean;
  TransactionId?: string;
  QueryAsOfTime?: Date;
}
export interface GetPartitionsResponse {
  Partitions?: Partition[];
  NextToken?: string;
}
export interface GetPlanRequest {
  Mapping: MappingEntry[] | undefined;
  Source: CatalogEntry | undefined;
  Sinks?: CatalogEntry[];
  Location?: Location;
  Language?: Language;
  AdditionalPlanOptionsMap?: Record<string, string>;
}
export interface GetPlanResponse {
  PythonScript?: string;
  ScalaCode?: string;
}
export interface GetRegistryInput {
  RegistryId: RegistryId | undefined;
}
export interface GetRegistryResponse {
  RegistryName?: string;
  RegistryArn?: string;
  Description?: string;
  Status?: RegistryStatus;
  CreatedTime?: string;
  UpdatedTime?: string;
}
export interface GetResourcePoliciesRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface GluePolicy {
  PolicyInJson?: string;
  PolicyHash?: string;
  CreateTime?: Date;
  UpdateTime?: Date;
}
export interface GetResourcePoliciesResponse {
  GetResourcePoliciesResponseList?: GluePolicy[];
  NextToken?: string;
}
export interface GetResourcePolicyRequest {
  ResourceArn?: string;
}
export interface GetResourcePolicyResponse {
  PolicyInJson?: string;
  PolicyHash?: string;
  CreateTime?: Date;
  UpdateTime?: Date;
}
export interface GetSchemaInput {
  SchemaId: SchemaId | undefined;
}
export interface GetSchemaResponse {
  RegistryName?: string;
  RegistryArn?: string;
  SchemaName?: string;
  SchemaArn?: string;
  Description?: string;
  DataFormat?: DataFormat;
  Compatibility?: Compatibility;
  SchemaCheckpoint?: number;
  LatestSchemaVersion?: number;
  NextSchemaVersion?: number;
  SchemaStatus?: SchemaStatus;
  CreatedTime?: string;
  UpdatedTime?: string;
}
export interface GetSchemaByDefinitionInput {
  SchemaId: SchemaId | undefined;
  SchemaDefinition: string | undefined;
}
export interface GetSchemaByDefinitionResponse {
  SchemaVersionId?: string;
  SchemaArn?: string;
  DataFormat?: DataFormat;
  Status?: SchemaVersionStatus;
  CreatedTime?: string;
}
export interface SchemaVersionNumber {
  LatestVersion?: boolean;
  VersionNumber?: number;
}
export interface GetSchemaVersionInput {
  SchemaId?: SchemaId;
  SchemaVersionId?: string;
  SchemaVersionNumber?: SchemaVersionNumber;
}
export interface GetSchemaVersionResponse {
  SchemaVersionId?: string;
  SchemaDefinition?: string;
  DataFormat?: DataFormat;
  SchemaArn?: string;
  VersionNumber?: number;
  Status?: SchemaVersionStatus;
  CreatedTime?: string;
}
export declare const SchemaDiffType: {
  readonly SYNTAX_DIFF: "SYNTAX_DIFF";
};
export type SchemaDiffType =
  (typeof SchemaDiffType)[keyof typeof SchemaDiffType];
export interface GetSchemaVersionsDiffInput {
  SchemaId: SchemaId | undefined;
  FirstSchemaVersionNumber: SchemaVersionNumber | undefined;
  SecondSchemaVersionNumber: SchemaVersionNumber | undefined;
  SchemaDiffType: SchemaDiffType | undefined;
}
export interface GetSchemaVersionsDiffResponse {
  Diff?: string;
}
export interface GetSecurityConfigurationRequest {
  Name: string | undefined;
}
export interface SecurityConfiguration {
  Name?: string;
  CreatedTimeStamp?: Date;
  EncryptionConfiguration?: EncryptionConfiguration;
}
export interface GetSecurityConfigurationResponse {
  SecurityConfiguration?: SecurityConfiguration;
}
export interface GetSecurityConfigurationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
