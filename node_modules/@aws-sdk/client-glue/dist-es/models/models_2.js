import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { GlueServiceException as __BaseException } from "./GlueServiceException";
export const StatementState = {
    AVAILABLE: "AVAILABLE",
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    ERROR: "ERROR",
    RUNNING: "RUNNING",
    WAITING: "WAITING",
};
export const PermissionType = {
    CELL_FILTER_PERMISSION: "CELL_FILTER_PERMISSION",
    COLUMN_PERMISSION: "COLUMN_PERMISSION",
    NESTED_CELL_PERMISSION: "NESTED_CELL_PERMISSION",
    NESTED_PERMISSION: "NESTED_PERMISSION",
};
export class PermissionTypeMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "PermissionTypeMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "PermissionTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PermissionTypeMismatchException.prototype);
        this.Message = opts.Message;
    }
}
export const ViewDialect = {
    ATHENA: "ATHENA",
    REDSHIFT: "REDSHIFT",
    SPARK: "SPARK",
};
export const FieldName = {
    CRAWL_ID: "CRAWL_ID",
    DPU_HOUR: "DPU_HOUR",
    END_TIME: "END_TIME",
    START_TIME: "START_TIME",
    STATE: "STATE",
};
export const FilterOperator = {
    EQ: "EQ",
    GE: "GE",
    GT: "GT",
    LE: "LE",
    LT: "LT",
    NE: "NE",
};
export const CrawlerHistoryState = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
};
export const EnableHybridValues = {
    FALSE: "FALSE",
    TRUE: "TRUE",
};
export const ExistCondition = {
    MUST_EXIST: "MUST_EXIST",
    NONE: "NONE",
    NOT_EXIST: "NOT_EXIST",
};
export class ConcurrentRunsExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentRunsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentRunsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentRunsExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class IllegalWorkflowStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "IllegalWorkflowStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalWorkflowStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalWorkflowStateException.prototype);
        this.Message = opts.Message;
    }
}
export const Comparator = {
    EQUALS: "EQUALS",
    GREATER_THAN: "GREATER_THAN",
    GREATER_THAN_EQUALS: "GREATER_THAN_EQUALS",
    LESS_THAN: "LESS_THAN",
    LESS_THAN_EQUALS: "LESS_THAN_EQUALS",
};
export const Sort = {
    ASCENDING: "ASC",
    DESCENDING: "DESC",
};
export class IllegalBlueprintStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "IllegalBlueprintStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalBlueprintStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalBlueprintStateException.prototype);
        this.Message = opts.Message;
    }
}
export class ColumnStatisticsTaskRunningException extends __BaseException {
    constructor(opts) {
        super({
            name: "ColumnStatisticsTaskRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "ColumnStatisticsTaskRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ColumnStatisticsTaskRunningException.prototype);
        this.Message = opts.Message;
    }
}
export class NoScheduleException extends __BaseException {
    constructor(opts) {
        super({
            name: "NoScheduleException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoScheduleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoScheduleException.prototype);
        this.Message = opts.Message;
    }
}
export class SchedulerRunningException extends __BaseException {
    constructor(opts) {
        super({
            name: "SchedulerRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "SchedulerRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SchedulerRunningException.prototype);
        this.Message = opts.Message;
    }
}
export class MLTransformNotReadyException extends __BaseException {
    constructor(opts) {
        super({
            name: "MLTransformNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "MLTransformNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MLTransformNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
export class ColumnStatisticsTaskNotRunningException extends __BaseException {
    constructor(opts) {
        super({
            name: "ColumnStatisticsTaskNotRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "ColumnStatisticsTaskNotRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ColumnStatisticsTaskNotRunningException.prototype);
        this.Message = opts.Message;
    }
}
export class ColumnStatisticsTaskStoppingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ColumnStatisticsTaskStoppingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ColumnStatisticsTaskStoppingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ColumnStatisticsTaskStoppingException.prototype);
        this.Message = opts.Message;
    }
}
export class CrawlerNotRunningException extends __BaseException {
    constructor(opts) {
        super({
            name: "CrawlerNotRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "CrawlerNotRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CrawlerNotRunningException.prototype);
        this.Message = opts.Message;
    }
}
export class CrawlerStoppingException extends __BaseException {
    constructor(opts) {
        super({
            name: "CrawlerStoppingException",
            $fault: "client",
            ...opts,
        });
        this.name = "CrawlerStoppingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CrawlerStoppingException.prototype);
        this.Message = opts.Message;
    }
}
export class SchedulerNotRunningException extends __BaseException {
    constructor(opts) {
        super({
            name: "SchedulerNotRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "SchedulerNotRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SchedulerNotRunningException.prototype);
        this.Message = opts.Message;
    }
}
export class VersionMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "VersionMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "VersionMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, VersionMismatchException.prototype);
        this.Message = opts.Message;
    }
}
export const CreateJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeGenConfigurationNodes && { CodeGenConfigurationNodes: SENSITIVE_STRING }),
});
export const JobFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeGenConfigurationNodes && { CodeGenConfigurationNodes: SENSITIVE_STRING }),
});
export const JobUpdateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeGenConfigurationNodes && { CodeGenConfigurationNodes: SENSITIVE_STRING }),
});
export const GetJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Job && { Job: JobFilterSensitiveLog(obj.Job) }),
});
export const UpdateJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.JobUpdate && { JobUpdate: JobUpdateFilterSensitiveLog(obj.JobUpdate) }),
});
export const BatchGetJobsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Jobs && { Jobs: obj.Jobs.map((item) => JobFilterSensitiveLog(item)) }),
});
export const GetJobsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Jobs && { Jobs: obj.Jobs.map((item) => JobFilterSensitiveLog(item)) }),
});
