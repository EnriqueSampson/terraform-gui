"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetJobsResponseFilterSensitiveLog = exports.BatchGetJobsResponseFilterSensitiveLog = exports.UpdateJobRequestFilterSensitiveLog = exports.GetJobResponseFilterSensitiveLog = exports.JobUpdateFilterSensitiveLog = exports.JobFilterSensitiveLog = exports.CreateJobRequestFilterSensitiveLog = exports.VersionMismatchException = exports.SchedulerNotRunningException = exports.CrawlerStoppingException = exports.CrawlerNotRunningException = exports.ColumnStatisticsTaskStoppingException = exports.ColumnStatisticsTaskNotRunningException = exports.MLTransformNotReadyException = exports.SchedulerRunningException = exports.NoScheduleException = exports.ColumnStatisticsTaskRunningException = exports.IllegalBlueprintStateException = exports.Sort = exports.Comparator = exports.IllegalWorkflowStateException = exports.ConcurrentRunsExceededException = exports.ExistCondition = exports.EnableHybridValues = exports.CrawlerHistoryState = exports.FilterOperator = exports.FieldName = exports.ViewDialect = exports.PermissionTypeMismatchException = exports.PermissionType = exports.StatementState = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const GlueServiceException_1 = require("./GlueServiceException");
exports.StatementState = {
    AVAILABLE: "AVAILABLE",
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    ERROR: "ERROR",
    RUNNING: "RUNNING",
    WAITING: "WAITING",
};
exports.PermissionType = {
    CELL_FILTER_PERMISSION: "CELL_FILTER_PERMISSION",
    COLUMN_PERMISSION: "COLUMN_PERMISSION",
    NESTED_CELL_PERMISSION: "NESTED_CELL_PERMISSION",
    NESTED_PERMISSION: "NESTED_PERMISSION",
};
class PermissionTypeMismatchException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "PermissionTypeMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "PermissionTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PermissionTypeMismatchException.prototype);
        this.Message = opts.Message;
    }
}
exports.PermissionTypeMismatchException = PermissionTypeMismatchException;
exports.ViewDialect = {
    ATHENA: "ATHENA",
    REDSHIFT: "REDSHIFT",
    SPARK: "SPARK",
};
exports.FieldName = {
    CRAWL_ID: "CRAWL_ID",
    DPU_HOUR: "DPU_HOUR",
    END_TIME: "END_TIME",
    START_TIME: "START_TIME",
    STATE: "STATE",
};
exports.FilterOperator = {
    EQ: "EQ",
    GE: "GE",
    GT: "GT",
    LE: "LE",
    LT: "LT",
    NE: "NE",
};
exports.CrawlerHistoryState = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
};
exports.EnableHybridValues = {
    FALSE: "FALSE",
    TRUE: "TRUE",
};
exports.ExistCondition = {
    MUST_EXIST: "MUST_EXIST",
    NONE: "NONE",
    NOT_EXIST: "NOT_EXIST",
};
class ConcurrentRunsExceededException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentRunsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentRunsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentRunsExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConcurrentRunsExceededException = ConcurrentRunsExceededException;
class IllegalWorkflowStateException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "IllegalWorkflowStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalWorkflowStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalWorkflowStateException.prototype);
        this.Message = opts.Message;
    }
}
exports.IllegalWorkflowStateException = IllegalWorkflowStateException;
exports.Comparator = {
    EQUALS: "EQUALS",
    GREATER_THAN: "GREATER_THAN",
    GREATER_THAN_EQUALS: "GREATER_THAN_EQUALS",
    LESS_THAN: "LESS_THAN",
    LESS_THAN_EQUALS: "LESS_THAN_EQUALS",
};
exports.Sort = {
    ASCENDING: "ASC",
    DESCENDING: "DESC",
};
class IllegalBlueprintStateException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "IllegalBlueprintStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalBlueprintStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalBlueprintStateException.prototype);
        this.Message = opts.Message;
    }
}
exports.IllegalBlueprintStateException = IllegalBlueprintStateException;
class ColumnStatisticsTaskRunningException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ColumnStatisticsTaskRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "ColumnStatisticsTaskRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ColumnStatisticsTaskRunningException.prototype);
        this.Message = opts.Message;
    }
}
exports.ColumnStatisticsTaskRunningException = ColumnStatisticsTaskRunningException;
class NoScheduleException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "NoScheduleException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoScheduleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoScheduleException.prototype);
        this.Message = opts.Message;
    }
}
exports.NoScheduleException = NoScheduleException;
class SchedulerRunningException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "SchedulerRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "SchedulerRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SchedulerRunningException.prototype);
        this.Message = opts.Message;
    }
}
exports.SchedulerRunningException = SchedulerRunningException;
class MLTransformNotReadyException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "MLTransformNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "MLTransformNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MLTransformNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
exports.MLTransformNotReadyException = MLTransformNotReadyException;
class ColumnStatisticsTaskNotRunningException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ColumnStatisticsTaskNotRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "ColumnStatisticsTaskNotRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ColumnStatisticsTaskNotRunningException.prototype);
        this.Message = opts.Message;
    }
}
exports.ColumnStatisticsTaskNotRunningException = ColumnStatisticsTaskNotRunningException;
class ColumnStatisticsTaskStoppingException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ColumnStatisticsTaskStoppingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ColumnStatisticsTaskStoppingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ColumnStatisticsTaskStoppingException.prototype);
        this.Message = opts.Message;
    }
}
exports.ColumnStatisticsTaskStoppingException = ColumnStatisticsTaskStoppingException;
class CrawlerNotRunningException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "CrawlerNotRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "CrawlerNotRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CrawlerNotRunningException.prototype);
        this.Message = opts.Message;
    }
}
exports.CrawlerNotRunningException = CrawlerNotRunningException;
class CrawlerStoppingException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "CrawlerStoppingException",
            $fault: "client",
            ...opts,
        });
        this.name = "CrawlerStoppingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CrawlerStoppingException.prototype);
        this.Message = opts.Message;
    }
}
exports.CrawlerStoppingException = CrawlerStoppingException;
class SchedulerNotRunningException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "SchedulerNotRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "SchedulerNotRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SchedulerNotRunningException.prototype);
        this.Message = opts.Message;
    }
}
exports.SchedulerNotRunningException = SchedulerNotRunningException;
class VersionMismatchException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "VersionMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "VersionMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, VersionMismatchException.prototype);
        this.Message = opts.Message;
    }
}
exports.VersionMismatchException = VersionMismatchException;
const CreateJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeGenConfigurationNodes && { CodeGenConfigurationNodes: smithy_client_1.SENSITIVE_STRING }),
});
exports.CreateJobRequestFilterSensitiveLog = CreateJobRequestFilterSensitiveLog;
const JobFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeGenConfigurationNodes && { CodeGenConfigurationNodes: smithy_client_1.SENSITIVE_STRING }),
});
exports.JobFilterSensitiveLog = JobFilterSensitiveLog;
const JobUpdateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeGenConfigurationNodes && { CodeGenConfigurationNodes: smithy_client_1.SENSITIVE_STRING }),
});
exports.JobUpdateFilterSensitiveLog = JobUpdateFilterSensitiveLog;
const GetJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Job && { Job: (0, exports.JobFilterSensitiveLog)(obj.Job) }),
});
exports.GetJobResponseFilterSensitiveLog = GetJobResponseFilterSensitiveLog;
const UpdateJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.JobUpdate && { JobUpdate: (0, exports.JobUpdateFilterSensitiveLog)(obj.JobUpdate) }),
});
exports.UpdateJobRequestFilterSensitiveLog = UpdateJobRequestFilterSensitiveLog;
const BatchGetJobsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Jobs && { Jobs: obj.Jobs.map((item) => (0, exports.JobFilterSensitiveLog)(item)) }),
});
exports.BatchGetJobsResponseFilterSensitiveLog = BatchGetJobsResponseFilterSensitiveLog;
const GetJobsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Jobs && { Jobs: obj.Jobs.map((item) => (0, exports.JobFilterSensitiveLog)(item)) }),
});
exports.GetJobsResponseFilterSensitiveLog = GetJobsResponseFilterSensitiveLog;
