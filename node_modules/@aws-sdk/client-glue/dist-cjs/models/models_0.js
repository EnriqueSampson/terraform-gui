"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidStateException = exports.FederationSourceRetryableException = exports.FederationSourceException = exports.FederationSourceErrorCode = exports.SourceControlProvider = exports.SourceControlAuthStrategy = exports.ExecutionClass = exports.UnionType = exports.HudiTargetCompressionType = exports.ParquetCompressionType = exports.TargetFormat = exports.DeltaTargetCompressionType = exports.Separator = exports.QuoteChar = exports.CompressionType = exports.PiiType = exports.JoinType = exports.GlueRecordType = exports.JDBCDataType = exports.UpdateCatalogBehavior = exports.FilterLogicalOperator = exports.FilterValueType = exports.FilterOperation = exports.DQStopJobOnFailureTiming = exports.DQTransformOutput = exports.ParamType = exports.JDBCConnectionType = exports.StartingPosition = exports.WorkerType = exports.DataQualityRuleResultStatus = exports.JdbcMetadataEntry = exports.CrawlerState = exports.UpdateBehavior = exports.DeleteBehavior = exports.ScheduleState = exports.RecrawlBehavior = exports.CrawlerLineageSettings = exports.LastCrawlStatus = exports.BlueprintStatus = exports.ResourceNotReadyException = exports.ResourceNumberLimitExceededException = exports.OperationTimeoutException = exports.InvalidInputException = exports.InternalServiceException = exports.GlueEncryptionException = exports.EntityNotFoundException = exports.AlreadyExistsException = exports.AggFunction = exports.AdditionalOptionKeys = exports.AccessDeniedException = void 0;
exports.ConnectionType = exports.ConnectionPropertyKey = exports.CsvSerdeOption = exports.CsvHeaderOption = exports.DataFormat = exports.IllegalSessionStateException = exports.TaskStatusType = exports.WorkflowRunStatus = exports.NodeType = exports.TriggerType = exports.TriggerState = exports.Logical = exports.JobRunState = exports.LogicalOperator = exports.CrawlState = exports.TableOptimizerEventType = exports.TableOptimizerType = void 0;
const GlueServiceException_1 = require("./GlueServiceException");
class AccessDeniedException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.AdditionalOptionKeys = {
    CacheOption: "performanceTuning.caching",
    ObservationsOption: "observations.scope",
};
exports.AggFunction = {
    avg: "avg",
    count: "count",
    countDistinct: "countDistinct",
    first: "first",
    kurtosis: "kurtosis",
    last: "last",
    max: "max",
    min: "min",
    skewness: "skewness",
    stddev_pop: "stddev_pop",
    stddev_samp: "stddev_samp",
    sum: "sum",
    sumDistinct: "sumDistinct",
    var_pop: "var_pop",
    var_samp: "var_samp",
};
class AlreadyExistsException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.AlreadyExistsException = AlreadyExistsException;
class EntityNotFoundException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "EntityNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EntityNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntityNotFoundException.prototype);
        this.Message = opts.Message;
        this.FromFederationSource = opts.FromFederationSource;
    }
}
exports.EntityNotFoundException = EntityNotFoundException;
class GlueEncryptionException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "GlueEncryptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "GlueEncryptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlueEncryptionException.prototype);
        this.Message = opts.Message;
    }
}
exports.GlueEncryptionException = GlueEncryptionException;
class InternalServiceException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServiceException = InternalServiceException;
class InvalidInputException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
        this.FromFederationSource = opts.FromFederationSource;
    }
}
exports.InvalidInputException = InvalidInputException;
class OperationTimeoutException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "OperationTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationTimeoutException.prototype);
        this.Message = opts.Message;
    }
}
exports.OperationTimeoutException = OperationTimeoutException;
class ResourceNumberLimitExceededException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ResourceNumberLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNumberLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNumberLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNumberLimitExceededException = ResourceNumberLimitExceededException;
class ResourceNotReadyException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotReadyException = ResourceNotReadyException;
exports.BlueprintStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
exports.LastCrawlStatus = {
    CANCELLED: "CANCELLED",
    FAILED: "FAILED",
    SUCCEEDED: "SUCCEEDED",
};
exports.CrawlerLineageSettings = {
    DISABLE: "DISABLE",
    ENABLE: "ENABLE",
};
exports.RecrawlBehavior = {
    CRAWL_EVENT_MODE: "CRAWL_EVENT_MODE",
    CRAWL_EVERYTHING: "CRAWL_EVERYTHING",
    CRAWL_NEW_FOLDERS_ONLY: "CRAWL_NEW_FOLDERS_ONLY",
};
exports.ScheduleState = {
    NOT_SCHEDULED: "NOT_SCHEDULED",
    SCHEDULED: "SCHEDULED",
    TRANSITIONING: "TRANSITIONING",
};
exports.DeleteBehavior = {
    DELETE_FROM_DATABASE: "DELETE_FROM_DATABASE",
    DEPRECATE_IN_DATABASE: "DEPRECATE_IN_DATABASE",
    LOG: "LOG",
};
exports.UpdateBehavior = {
    LOG: "LOG",
    UPDATE_IN_DATABASE: "UPDATE_IN_DATABASE",
};
exports.CrawlerState = {
    READY: "READY",
    RUNNING: "RUNNING",
    STOPPING: "STOPPING",
};
exports.JdbcMetadataEntry = {
    COMMENTS: "COMMENTS",
    RAWTYPES: "RAWTYPES",
};
exports.DataQualityRuleResultStatus = {
    ERROR: "ERROR",
    FAIL: "FAIL",
    PASS: "PASS",
};
exports.WorkerType = {
    G_025X: "G.025X",
    G_1X: "G.1X",
    G_2X: "G.2X",
    G_4X: "G.4X",
    G_8X: "G.8X",
    Standard: "Standard",
    Z_2X: "Z.2X",
};
exports.StartingPosition = {
    EARLIEST: "earliest",
    LATEST: "latest",
    TIMESTAMP: "timestamp",
    TRIM_HORIZON: "trim_horizon",
};
exports.JDBCConnectionType = {
    mysql: "mysql",
    oracle: "oracle",
    postgresql: "postgresql",
    redshift: "redshift",
    sqlserver: "sqlserver",
};
exports.ParamType = {
    BOOL: "bool",
    COMPLEX: "complex",
    FLOAT: "float",
    INT: "int",
    LIST: "list",
    NULL: "null",
    STR: "str",
};
exports.DQTransformOutput = {
    EvaluationResults: "EvaluationResults",
    PrimaryInput: "PrimaryInput",
};
exports.DQStopJobOnFailureTiming = {
    AfterDataLoad: "AfterDataLoad",
    Immediate: "Immediate",
};
exports.FilterOperation = {
    EQ: "EQ",
    GT: "GT",
    GTE: "GTE",
    ISNULL: "ISNULL",
    LT: "LT",
    LTE: "LTE",
    REGEX: "REGEX",
};
exports.FilterValueType = {
    COLUMNEXTRACTED: "COLUMNEXTRACTED",
    CONSTANT: "CONSTANT",
};
exports.FilterLogicalOperator = {
    AND: "AND",
    OR: "OR",
};
exports.UpdateCatalogBehavior = {
    LOG: "LOG",
    UPDATE_IN_DATABASE: "UPDATE_IN_DATABASE",
};
exports.JDBCDataType = {
    ARRAY: "ARRAY",
    BIGINT: "BIGINT",
    BINARY: "BINARY",
    BIT: "BIT",
    BLOB: "BLOB",
    BOOLEAN: "BOOLEAN",
    CHAR: "CHAR",
    CLOB: "CLOB",
    DATALINK: "DATALINK",
    DATE: "DATE",
    DECIMAL: "DECIMAL",
    DISTINCT: "DISTINCT",
    DOUBLE: "DOUBLE",
    FLOAT: "FLOAT",
    INTEGER: "INTEGER",
    JAVA_OBJECT: "JAVA_OBJECT",
    LONGNVARCHAR: "LONGNVARCHAR",
    LONGVARBINARY: "LONGVARBINARY",
    LONGVARCHAR: "LONGVARCHAR",
    NCHAR: "NCHAR",
    NCLOB: "NCLOB",
    NULL: "NULL",
    NUMERIC: "NUMERIC",
    NVARCHAR: "NVARCHAR",
    OTHER: "OTHER",
    REAL: "REAL",
    REF: "REF",
    REF_CURSOR: "REF_CURSOR",
    ROWID: "ROWID",
    SMALLINT: "SMALLINT",
    SQLXML: "SQLXML",
    STRUCT: "STRUCT",
    TIME: "TIME",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_WITH_TIMEZONE: "TIMESTAMP_WITH_TIMEZONE",
    TIME_WITH_TIMEZONE: "TIME_WITH_TIMEZONE",
    TINYINT: "TINYINT",
    VARBINARY: "VARBINARY",
    VARCHAR: "VARCHAR",
};
exports.GlueRecordType = {
    BIGDECIMAL: "BIGDECIMAL",
    BYTE: "BYTE",
    DATE: "DATE",
    DOUBLE: "DOUBLE",
    FLOAT: "FLOAT",
    INT: "INT",
    LONG: "LONG",
    SHORT: "SHORT",
    STRING: "STRING",
    TIMESTAMP: "TIMESTAMP",
};
exports.JoinType = {
    EQUIJOIN: "equijoin",
    LEFT: "left",
    LEFT_ANTI: "leftanti",
    LEFT_SEMI: "leftsemi",
    OUTER: "outer",
    RIGHT: "right",
};
exports.PiiType = {
    ColumnAudit: "ColumnAudit",
    ColumnMasking: "ColumnMasking",
    RowAudit: "RowAudit",
    RowMasking: "RowMasking",
};
exports.CompressionType = {
    BZIP2: "bzip2",
    GZIP: "gzip",
};
exports.QuoteChar = {
    DISABLED: "disabled",
    QUILLEMET: "quillemet",
    QUOTE: "quote",
    SINGLE_QUOTE: "single_quote",
};
exports.Separator = {
    COMMA: "comma",
    CTRLA: "ctrla",
    PIPE: "pipe",
    SEMICOLON: "semicolon",
    TAB: "tab",
};
exports.DeltaTargetCompressionType = {
    SNAPPY: "snappy",
    UNCOMPRESSED: "uncompressed",
};
exports.TargetFormat = {
    AVRO: "avro",
    CSV: "csv",
    DELTA: "delta",
    HUDI: "hudi",
    JSON: "json",
    ORC: "orc",
    PARQUET: "parquet",
};
exports.ParquetCompressionType = {
    GZIP: "gzip",
    LZO: "lzo",
    NONE: "none",
    SNAPPY: "snappy",
    UNCOMPRESSED: "uncompressed",
};
exports.HudiTargetCompressionType = {
    GZIP: "gzip",
    LZO: "lzo",
    SNAPPY: "snappy",
    UNCOMPRESSED: "uncompressed",
};
exports.UnionType = {
    ALL: "ALL",
    DISTINCT: "DISTINCT",
};
exports.ExecutionClass = {
    FLEX: "FLEX",
    STANDARD: "STANDARD",
};
exports.SourceControlAuthStrategy = {
    AWS_SECRETS_MANAGER: "AWS_SECRETS_MANAGER",
    PERSONAL_ACCESS_TOKEN: "PERSONAL_ACCESS_TOKEN",
};
exports.SourceControlProvider = {
    AWS_CODE_COMMIT: "AWS_CODE_COMMIT",
    BITBUCKET: "BITBUCKET",
    GITHUB: "GITHUB",
    GITLAB: "GITLAB",
};
exports.FederationSourceErrorCode = {
    InternalServiceException: "InternalServiceException",
    InvalidResponseException: "InvalidResponseException",
    OperationNotSupportedException: "OperationNotSupportedException",
    OperationTimeoutException: "OperationTimeoutException",
    ThrottlingException: "ThrottlingException",
};
class FederationSourceException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "FederationSourceException",
            $fault: "client",
            ...opts,
        });
        this.name = "FederationSourceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FederationSourceException.prototype);
        this.FederationSourceErrorCode = opts.FederationSourceErrorCode;
        this.Message = opts.Message;
    }
}
exports.FederationSourceException = FederationSourceException;
class FederationSourceRetryableException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "FederationSourceRetryableException",
            $fault: "client",
            ...opts,
        });
        this.name = "FederationSourceRetryableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FederationSourceRetryableException.prototype);
        this.Message = opts.Message;
    }
}
exports.FederationSourceRetryableException = FederationSourceRetryableException;
class InvalidStateException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidStateException = InvalidStateException;
exports.TableOptimizerType = {
    COMPACTION: "compaction",
};
exports.TableOptimizerEventType = {
    COMPLETED: "completed",
    FAILED: "failed",
    IN_PROGRESS: "in_progress",
    STARTING: "starting",
};
exports.CrawlState = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    ERROR: "ERROR",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};
exports.LogicalOperator = {
    EQUALS: "EQUALS",
};
exports.JobRunState = {
    ERROR: "ERROR",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    SUCCEEDED: "SUCCEEDED",
    TIMEOUT: "TIMEOUT",
    WAITING: "WAITING",
};
exports.Logical = {
    AND: "AND",
    ANY: "ANY",
};
exports.TriggerState = {
    ACTIVATED: "ACTIVATED",
    ACTIVATING: "ACTIVATING",
    CREATED: "CREATED",
    CREATING: "CREATING",
    DEACTIVATED: "DEACTIVATED",
    DEACTIVATING: "DEACTIVATING",
    DELETING: "DELETING",
    UPDATING: "UPDATING",
};
exports.TriggerType = {
    CONDITIONAL: "CONDITIONAL",
    EVENT: "EVENT",
    ON_DEMAND: "ON_DEMAND",
    SCHEDULED: "SCHEDULED",
};
exports.NodeType = {
    CRAWLER: "CRAWLER",
    JOB: "JOB",
    TRIGGER: "TRIGGER",
};
exports.WorkflowRunStatus = {
    COMPLETED: "COMPLETED",
    ERROR: "ERROR",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
exports.TaskStatusType = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    SUCCEEDED: "SUCCEEDED",
    TIMEOUT: "TIMEOUT",
};
class IllegalSessionStateException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "IllegalSessionStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalSessionStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalSessionStateException.prototype);
        this.Message = opts.Message;
    }
}
exports.IllegalSessionStateException = IllegalSessionStateException;
exports.DataFormat = {
    AVRO: "AVRO",
    JSON: "JSON",
    PROTOBUF: "PROTOBUF",
};
exports.CsvHeaderOption = {
    ABSENT: "ABSENT",
    PRESENT: "PRESENT",
    UNKNOWN: "UNKNOWN",
};
exports.CsvSerdeOption = {
    LazySimpleSerDe: "LazySimpleSerDe",
    None: "None",
    OpenCSVSerDe: "OpenCSVSerDe",
};
exports.ConnectionPropertyKey = {
    CONFIG_FILES: "CONFIG_FILES",
    CONNECTION_URL: "CONNECTION_URL",
    CONNECTOR_CLASS_NAME: "CONNECTOR_CLASS_NAME",
    CONNECTOR_TYPE: "CONNECTOR_TYPE",
    CONNECTOR_URL: "CONNECTOR_URL",
    CUSTOM_JDBC_CERT: "CUSTOM_JDBC_CERT",
    CUSTOM_JDBC_CERT_STRING: "CUSTOM_JDBC_CERT_STRING",
    ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD: "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD",
    ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD: "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD",
    ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD: "ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD",
    ENCRYPTED_PASSWORD: "ENCRYPTED_PASSWORD",
    HOST: "HOST",
    INSTANCE_ID: "INSTANCE_ID",
    JDBC_CONNECTION_URL: "JDBC_CONNECTION_URL",
    JDBC_DRIVER_CLASS_NAME: "JDBC_DRIVER_CLASS_NAME",
    JDBC_DRIVER_JAR_URI: "JDBC_DRIVER_JAR_URI",
    JDBC_ENFORCE_SSL: "JDBC_ENFORCE_SSL",
    JDBC_ENGINE: "JDBC_ENGINE",
    JDBC_ENGINE_VERSION: "JDBC_ENGINE_VERSION",
    KAFKA_BOOTSTRAP_SERVERS: "KAFKA_BOOTSTRAP_SERVERS",
    KAFKA_CLIENT_KEYSTORE: "KAFKA_CLIENT_KEYSTORE",
    KAFKA_CLIENT_KEYSTORE_PASSWORD: "KAFKA_CLIENT_KEYSTORE_PASSWORD",
    KAFKA_CLIENT_KEY_PASSWORD: "KAFKA_CLIENT_KEY_PASSWORD",
    KAFKA_CUSTOM_CERT: "KAFKA_CUSTOM_CERT",
    KAFKA_SASL_GSSAPI_KEYTAB: "KAFKA_SASL_GSSAPI_KEYTAB",
    KAFKA_SASL_GSSAPI_KRB5_CONF: "KAFKA_SASL_GSSAPI_KRB5_CONF",
    KAFKA_SASL_GSSAPI_PRINCIPAL: "KAFKA_SASL_GSSAPI_PRINCIPAL",
    KAFKA_SASL_GSSAPI_SERVICE: "KAFKA_SASL_GSSAPI_SERVICE",
    KAFKA_SASL_MECHANISM: "KAFKA_SASL_MECHANISM",
    KAFKA_SASL_SCRAM_PASSWORD: "KAFKA_SASL_SCRAM_PASSWORD",
    KAFKA_SASL_SCRAM_SECRETS_ARN: "KAFKA_SASL_SCRAM_SECRETS_ARN",
    KAFKA_SASL_SCRAM_USERNAME: "KAFKA_SASL_SCRAM_USERNAME",
    KAFKA_SKIP_CUSTOM_CERT_VALIDATION: "KAFKA_SKIP_CUSTOM_CERT_VALIDATION",
    KAFKA_SSL_ENABLED: "KAFKA_SSL_ENABLED",
    PASSWORD: "PASSWORD",
    PORT: "PORT",
    SECRET_ID: "SECRET_ID",
    SKIP_CUSTOM_JDBC_CERT_VALIDATION: "SKIP_CUSTOM_JDBC_CERT_VALIDATION",
    USER_NAME: "USERNAME",
};
exports.ConnectionType = {
    CUSTOM: "CUSTOM",
    JDBC: "JDBC",
    KAFKA: "KAFKA",
    MARKETPLACE: "MARKETPLACE",
    MONGODB: "MONGODB",
    NETWORK: "NETWORK",
    SFTP: "SFTP",
};
