"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaDiffType = exports.PartitionIndexStatus = exports.BackfillErrorCode = exports.TransformSortColumnType = exports.TransformStatusType = exports.SortDirectionType = exports.TaskRunSortColumnType = exports.TaskType = exports.CatalogEncryptionMode = exports.ResourceShareType = exports.ColumnStatisticsState = exports.ColumnStatisticsType = exports.BlueprintRunState = exports.ConditionCheckFailureException = exports.RegistryStatus = exports.ConflictException = exports.SchedulerTransitioningException = exports.CrawlerRunningException = exports.ResourceType = exports.PrincipalType = exports.MetadataOperation = exports.SessionStatus = exports.S3EncryptionMode = exports.JobBookmarksEncryptionMode = exports.CloudWatchEncryptionMode = exports.Language = exports.SchemaVersionStatus = exports.SchemaStatus = exports.Compatibility = exports.MLUserDataEncryptionModeString = exports.TransformType = exports.ValidationException = exports.FederatedResourceAlreadyExistsException = exports.Permission = exports.ConcurrentModificationException = exports.IdempotentParameterMismatchException = void 0;
const GlueServiceException_1 = require("./GlueServiceException");
class IdempotentParameterMismatchException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
    }
}
exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
class ConcurrentModificationException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.Permission = {
    ALL: "ALL",
    ALTER: "ALTER",
    CREATE_DATABASE: "CREATE_DATABASE",
    CREATE_TABLE: "CREATE_TABLE",
    DATA_LOCATION_ACCESS: "DATA_LOCATION_ACCESS",
    DELETE: "DELETE",
    DROP: "DROP",
    INSERT: "INSERT",
    SELECT: "SELECT",
};
class FederatedResourceAlreadyExistsException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "FederatedResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "FederatedResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FederatedResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.AssociatedGlueResource = opts.AssociatedGlueResource;
    }
}
exports.FederatedResourceAlreadyExistsException = FederatedResourceAlreadyExistsException;
class ValidationException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ValidationException = ValidationException;
exports.TransformType = {
    FIND_MATCHES: "FIND_MATCHES",
};
exports.MLUserDataEncryptionModeString = {
    DISABLED: "DISABLED",
    SSEKMS: "SSE-KMS",
};
exports.Compatibility = {
    BACKWARD: "BACKWARD",
    BACKWARD_ALL: "BACKWARD_ALL",
    DISABLED: "DISABLED",
    FORWARD: "FORWARD",
    FORWARD_ALL: "FORWARD_ALL",
    FULL: "FULL",
    FULL_ALL: "FULL_ALL",
    NONE: "NONE",
};
exports.SchemaStatus = {
    AVAILABLE: "AVAILABLE",
    DELETING: "DELETING",
    PENDING: "PENDING",
};
exports.SchemaVersionStatus = {
    AVAILABLE: "AVAILABLE",
    DELETING: "DELETING",
    FAILURE: "FAILURE",
    PENDING: "PENDING",
};
exports.Language = {
    PYTHON: "PYTHON",
    SCALA: "SCALA",
};
exports.CloudWatchEncryptionMode = {
    DISABLED: "DISABLED",
    SSEKMS: "SSE-KMS",
};
exports.JobBookmarksEncryptionMode = {
    CSEKMS: "CSE-KMS",
    DISABLED: "DISABLED",
};
exports.S3EncryptionMode = {
    DISABLED: "DISABLED",
    SSEKMS: "SSE-KMS",
    SSES3: "SSE-S3",
};
exports.SessionStatus = {
    FAILED: "FAILED",
    PROVISIONING: "PROVISIONING",
    READY: "READY",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    TIMEOUT: "TIMEOUT",
};
exports.MetadataOperation = {
    CREATE: "CREATE",
};
exports.PrincipalType = {
    GROUP: "GROUP",
    ROLE: "ROLE",
    USER: "USER",
};
exports.ResourceType = {
    ARCHIVE: "ARCHIVE",
    FILE: "FILE",
    JAR: "JAR",
};
class CrawlerRunningException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "CrawlerRunningException",
            $fault: "client",
            ...opts,
        });
        this.name = "CrawlerRunningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CrawlerRunningException.prototype);
        this.Message = opts.Message;
    }
}
exports.CrawlerRunningException = CrawlerRunningException;
class SchedulerTransitioningException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "SchedulerTransitioningException",
            $fault: "client",
            ...opts,
        });
        this.name = "SchedulerTransitioningException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SchedulerTransitioningException.prototype);
        this.Message = opts.Message;
    }
}
exports.SchedulerTransitioningException = SchedulerTransitioningException;
class ConflictException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
exports.RegistryStatus = {
    AVAILABLE: "AVAILABLE",
    DELETING: "DELETING",
};
class ConditionCheckFailureException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ConditionCheckFailureException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConditionCheckFailureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConditionCheckFailureException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConditionCheckFailureException = ConditionCheckFailureException;
exports.BlueprintRunState = {
    FAILED: "FAILED",
    ROLLING_BACK: "ROLLING_BACK",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};
exports.ColumnStatisticsType = {
    BINARY: "BINARY",
    BOOLEAN: "BOOLEAN",
    DATE: "DATE",
    DECIMAL: "DECIMAL",
    DOUBLE: "DOUBLE",
    LONG: "LONG",
    STRING: "STRING",
};
exports.ColumnStatisticsState = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    SUCCEEDED: "SUCCEEDED",
};
exports.ResourceShareType = {
    ALL: "ALL",
    FEDERATED: "FEDERATED",
    FOREIGN: "FOREIGN",
};
exports.CatalogEncryptionMode = {
    DISABLED: "DISABLED",
    SSEKMS: "SSE-KMS",
};
exports.TaskType = {
    EVALUATION: "EVALUATION",
    EXPORT_LABELS: "EXPORT_LABELS",
    FIND_MATCHES: "FIND_MATCHES",
    IMPORT_LABELS: "IMPORT_LABELS",
    LABELING_SET_GENERATION: "LABELING_SET_GENERATION",
};
exports.TaskRunSortColumnType = {
    STARTED: "STARTED",
    STATUS: "STATUS",
    TASK_RUN_TYPE: "TASK_RUN_TYPE",
};
exports.SortDirectionType = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
exports.TransformStatusType = {
    DELETING: "DELETING",
    NOT_READY: "NOT_READY",
    READY: "READY",
};
exports.TransformSortColumnType = {
    CREATED: "CREATED",
    LAST_MODIFIED: "LAST_MODIFIED",
    NAME: "NAME",
    STATUS: "STATUS",
    TRANSFORM_TYPE: "TRANSFORM_TYPE",
};
exports.BackfillErrorCode = {
    ENCRYPTED_PARTITION_ERROR: "ENCRYPTED_PARTITION_ERROR",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_PARTITION_TYPE_DATA_ERROR: "INVALID_PARTITION_TYPE_DATA_ERROR",
    MISSING_PARTITION_VALUE_ERROR: "MISSING_PARTITION_VALUE_ERROR",
    UNSUPPORTED_PARTITION_CHARACTER_ERROR: "UNSUPPORTED_PARTITION_CHARACTER_ERROR",
};
exports.PartitionIndexStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
};
exports.SchemaDiffType = {
    SYNTAX_DIFF: "SYNTAX_DIFF",
};
