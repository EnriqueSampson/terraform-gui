"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_DeleteCrawlerCommand = exports.se_DeleteConnectionCommand = exports.se_DeleteColumnStatisticsForTableCommand = exports.se_DeleteColumnStatisticsForPartitionCommand = exports.se_DeleteClassifierCommand = exports.se_DeleteBlueprintCommand = exports.se_CreateWorkflowCommand = exports.se_CreateUserDefinedFunctionCommand = exports.se_CreateTriggerCommand = exports.se_CreateTableOptimizerCommand = exports.se_CreateTableCommand = exports.se_CreateSessionCommand = exports.se_CreateSecurityConfigurationCommand = exports.se_CreateScriptCommand = exports.se_CreateSchemaCommand = exports.se_CreateRegistryCommand = exports.se_CreatePartitionIndexCommand = exports.se_CreatePartitionCommand = exports.se_CreateMLTransformCommand = exports.se_CreateJobCommand = exports.se_CreateDevEndpointCommand = exports.se_CreateDataQualityRulesetCommand = exports.se_CreateDatabaseCommand = exports.se_CreateCustomEntityTypeCommand = exports.se_CreateCrawlerCommand = exports.se_CreateConnectionCommand = exports.se_CreateClassifierCommand = exports.se_CreateBlueprintCommand = exports.se_CheckSchemaVersionValidityCommand = exports.se_CancelStatementCommand = exports.se_CancelMLTaskRunCommand = exports.se_CancelDataQualityRulesetEvaluationRunCommand = exports.se_CancelDataQualityRuleRecommendationRunCommand = exports.se_BatchUpdatePartitionCommand = exports.se_BatchStopJobRunCommand = exports.se_BatchGetWorkflowsCommand = exports.se_BatchGetTriggersCommand = exports.se_BatchGetTableOptimizerCommand = exports.se_BatchGetPartitionCommand = exports.se_BatchGetJobsCommand = exports.se_BatchGetDevEndpointsCommand = exports.se_BatchGetDataQualityResultCommand = exports.se_BatchGetCustomEntityTypesCommand = exports.se_BatchGetCrawlersCommand = exports.se_BatchGetBlueprintsCommand = exports.se_BatchDeleteTableVersionCommand = exports.se_BatchDeleteTableCommand = exports.se_BatchDeletePartitionCommand = exports.se_BatchDeleteConnectionCommand = exports.se_BatchCreatePartitionCommand = void 0;
exports.se_GetJobRunsCommand = exports.se_GetJobRunCommand = exports.se_GetJobBookmarkCommand = exports.se_GetJobCommand = exports.se_GetDevEndpointsCommand = exports.se_GetDevEndpointCommand = exports.se_GetDataQualityRulesetEvaluationRunCommand = exports.se_GetDataQualityRulesetCommand = exports.se_GetDataQualityRuleRecommendationRunCommand = exports.se_GetDataQualityResultCommand = exports.se_GetDataflowGraphCommand = exports.se_GetDataCatalogEncryptionSettingsCommand = exports.se_GetDatabasesCommand = exports.se_GetDatabaseCommand = exports.se_GetCustomEntityTypeCommand = exports.se_GetCrawlersCommand = exports.se_GetCrawlerMetricsCommand = exports.se_GetCrawlerCommand = exports.se_GetConnectionsCommand = exports.se_GetConnectionCommand = exports.se_GetColumnStatisticsTaskRunsCommand = exports.se_GetColumnStatisticsTaskRunCommand = exports.se_GetColumnStatisticsForTableCommand = exports.se_GetColumnStatisticsForPartitionCommand = exports.se_GetClassifiersCommand = exports.se_GetClassifierCommand = exports.se_GetCatalogImportStatusCommand = exports.se_GetBlueprintRunsCommand = exports.se_GetBlueprintRunCommand = exports.se_GetBlueprintCommand = exports.se_DeleteWorkflowCommand = exports.se_DeleteUserDefinedFunctionCommand = exports.se_DeleteTriggerCommand = exports.se_DeleteTableVersionCommand = exports.se_DeleteTableOptimizerCommand = exports.se_DeleteTableCommand = exports.se_DeleteSessionCommand = exports.se_DeleteSecurityConfigurationCommand = exports.se_DeleteSchemaVersionsCommand = exports.se_DeleteSchemaCommand = exports.se_DeleteResourcePolicyCommand = exports.se_DeleteRegistryCommand = exports.se_DeletePartitionIndexCommand = exports.se_DeletePartitionCommand = exports.se_DeleteMLTransformCommand = exports.se_DeleteJobCommand = exports.se_DeleteDevEndpointCommand = exports.se_DeleteDataQualityRulesetCommand = exports.se_DeleteDatabaseCommand = exports.se_DeleteCustomEntityTypeCommand = void 0;
exports.se_ListJobsCommand = exports.se_ListDevEndpointsCommand = exports.se_ListDataQualityRulesetsCommand = exports.se_ListDataQualityRulesetEvaluationRunsCommand = exports.se_ListDataQualityRuleRecommendationRunsCommand = exports.se_ListDataQualityResultsCommand = exports.se_ListCustomEntityTypesCommand = exports.se_ListCrawlsCommand = exports.se_ListCrawlersCommand = exports.se_ListColumnStatisticsTaskRunsCommand = exports.se_ListBlueprintsCommand = exports.se_ImportCatalogToGlueCommand = exports.se_GetWorkflowRunsCommand = exports.se_GetWorkflowRunPropertiesCommand = exports.se_GetWorkflowRunCommand = exports.se_GetWorkflowCommand = exports.se_GetUserDefinedFunctionsCommand = exports.se_GetUserDefinedFunctionCommand = exports.se_GetUnfilteredTableMetadataCommand = exports.se_GetUnfilteredPartitionsMetadataCommand = exports.se_GetUnfilteredPartitionMetadataCommand = exports.se_GetTriggersCommand = exports.se_GetTriggerCommand = exports.se_GetTagsCommand = exports.se_GetTableVersionsCommand = exports.se_GetTableVersionCommand = exports.se_GetTablesCommand = exports.se_GetTableOptimizerCommand = exports.se_GetTableCommand = exports.se_GetStatementCommand = exports.se_GetSessionCommand = exports.se_GetSecurityConfigurationsCommand = exports.se_GetSecurityConfigurationCommand = exports.se_GetSchemaVersionsDiffCommand = exports.se_GetSchemaVersionCommand = exports.se_GetSchemaByDefinitionCommand = exports.se_GetSchemaCommand = exports.se_GetResourcePolicyCommand = exports.se_GetResourcePoliciesCommand = exports.se_GetRegistryCommand = exports.se_GetPlanCommand = exports.se_GetPartitionsCommand = exports.se_GetPartitionIndexesCommand = exports.se_GetPartitionCommand = exports.se_GetMLTransformsCommand = exports.se_GetMLTransformCommand = exports.se_GetMLTaskRunsCommand = exports.se_GetMLTaskRunCommand = exports.se_GetMappingCommand = exports.se_GetJobsCommand = void 0;
exports.se_UpdateDataQualityRulesetCommand = exports.se_UpdateDatabaseCommand = exports.se_UpdateCrawlerScheduleCommand = exports.se_UpdateCrawlerCommand = exports.se_UpdateConnectionCommand = exports.se_UpdateColumnStatisticsForTableCommand = exports.se_UpdateColumnStatisticsForPartitionCommand = exports.se_UpdateClassifierCommand = exports.se_UpdateBlueprintCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_StopWorkflowRunCommand = exports.se_StopTriggerCommand = exports.se_StopSessionCommand = exports.se_StopCrawlerScheduleCommand = exports.se_StopCrawlerCommand = exports.se_StopColumnStatisticsTaskRunCommand = exports.se_StartWorkflowRunCommand = exports.se_StartTriggerCommand = exports.se_StartMLLabelingSetGenerationTaskRunCommand = exports.se_StartMLEvaluationTaskRunCommand = exports.se_StartJobRunCommand = exports.se_StartImportLabelsTaskRunCommand = exports.se_StartExportLabelsTaskRunCommand = exports.se_StartDataQualityRulesetEvaluationRunCommand = exports.se_StartDataQualityRuleRecommendationRunCommand = exports.se_StartCrawlerScheduleCommand = exports.se_StartCrawlerCommand = exports.se_StartColumnStatisticsTaskRunCommand = exports.se_StartBlueprintRunCommand = exports.se_SearchTablesCommand = exports.se_RunStatementCommand = exports.se_ResumeWorkflowRunCommand = exports.se_ResetJobBookmarkCommand = exports.se_RemoveSchemaVersionMetadataCommand = exports.se_RegisterSchemaVersionCommand = exports.se_QuerySchemaVersionMetadataCommand = exports.se_PutWorkflowRunPropertiesCommand = exports.se_PutSchemaVersionMetadataCommand = exports.se_PutResourcePolicyCommand = exports.se_PutDataCatalogEncryptionSettingsCommand = exports.se_ListWorkflowsCommand = exports.se_ListTriggersCommand = exports.se_ListTableOptimizerRunsCommand = exports.se_ListStatementsCommand = exports.se_ListSessionsCommand = exports.se_ListSchemaVersionsCommand = exports.se_ListSchemasCommand = exports.se_ListRegistriesCommand = exports.se_ListMLTransformsCommand = void 0;
exports.de_CreateScriptCommand = exports.de_CreateSchemaCommand = exports.de_CreateRegistryCommand = exports.de_CreatePartitionIndexCommand = exports.de_CreatePartitionCommand = exports.de_CreateMLTransformCommand = exports.de_CreateJobCommand = exports.de_CreateDevEndpointCommand = exports.de_CreateDataQualityRulesetCommand = exports.de_CreateDatabaseCommand = exports.de_CreateCustomEntityTypeCommand = exports.de_CreateCrawlerCommand = exports.de_CreateConnectionCommand = exports.de_CreateClassifierCommand = exports.de_CreateBlueprintCommand = exports.de_CheckSchemaVersionValidityCommand = exports.de_CancelStatementCommand = exports.de_CancelMLTaskRunCommand = exports.de_CancelDataQualityRulesetEvaluationRunCommand = exports.de_CancelDataQualityRuleRecommendationRunCommand = exports.de_BatchUpdatePartitionCommand = exports.de_BatchStopJobRunCommand = exports.de_BatchGetWorkflowsCommand = exports.de_BatchGetTriggersCommand = exports.de_BatchGetTableOptimizerCommand = exports.de_BatchGetPartitionCommand = exports.de_BatchGetJobsCommand = exports.de_BatchGetDevEndpointsCommand = exports.de_BatchGetDataQualityResultCommand = exports.de_BatchGetCustomEntityTypesCommand = exports.de_BatchGetCrawlersCommand = exports.de_BatchGetBlueprintsCommand = exports.de_BatchDeleteTableVersionCommand = exports.de_BatchDeleteTableCommand = exports.de_BatchDeletePartitionCommand = exports.de_BatchDeleteConnectionCommand = exports.de_BatchCreatePartitionCommand = exports.se_UpdateWorkflowCommand = exports.se_UpdateUserDefinedFunctionCommand = exports.se_UpdateTriggerCommand = exports.se_UpdateTableOptimizerCommand = exports.se_UpdateTableCommand = exports.se_UpdateSourceControlFromJobCommand = exports.se_UpdateSchemaCommand = exports.se_UpdateRegistryCommand = exports.se_UpdatePartitionCommand = exports.se_UpdateMLTransformCommand = exports.se_UpdateJobFromSourceControlCommand = exports.se_UpdateJobCommand = exports.se_UpdateDevEndpointCommand = void 0;
exports.de_GetDatabaseCommand = exports.de_GetCustomEntityTypeCommand = exports.de_GetCrawlersCommand = exports.de_GetCrawlerMetricsCommand = exports.de_GetCrawlerCommand = exports.de_GetConnectionsCommand = exports.de_GetConnectionCommand = exports.de_GetColumnStatisticsTaskRunsCommand = exports.de_GetColumnStatisticsTaskRunCommand = exports.de_GetColumnStatisticsForTableCommand = exports.de_GetColumnStatisticsForPartitionCommand = exports.de_GetClassifiersCommand = exports.de_GetClassifierCommand = exports.de_GetCatalogImportStatusCommand = exports.de_GetBlueprintRunsCommand = exports.de_GetBlueprintRunCommand = exports.de_GetBlueprintCommand = exports.de_DeleteWorkflowCommand = exports.de_DeleteUserDefinedFunctionCommand = exports.de_DeleteTriggerCommand = exports.de_DeleteTableVersionCommand = exports.de_DeleteTableOptimizerCommand = exports.de_DeleteTableCommand = exports.de_DeleteSessionCommand = exports.de_DeleteSecurityConfigurationCommand = exports.de_DeleteSchemaVersionsCommand = exports.de_DeleteSchemaCommand = exports.de_DeleteResourcePolicyCommand = exports.de_DeleteRegistryCommand = exports.de_DeletePartitionIndexCommand = exports.de_DeletePartitionCommand = exports.de_DeleteMLTransformCommand = exports.de_DeleteJobCommand = exports.de_DeleteDevEndpointCommand = exports.de_DeleteDataQualityRulesetCommand = exports.de_DeleteDatabaseCommand = exports.de_DeleteCustomEntityTypeCommand = exports.de_DeleteCrawlerCommand = exports.de_DeleteConnectionCommand = exports.de_DeleteColumnStatisticsForTableCommand = exports.de_DeleteColumnStatisticsForPartitionCommand = exports.de_DeleteClassifierCommand = exports.de_DeleteBlueprintCommand = exports.de_CreateWorkflowCommand = exports.de_CreateUserDefinedFunctionCommand = exports.de_CreateTriggerCommand = exports.de_CreateTableOptimizerCommand = exports.de_CreateTableCommand = exports.de_CreateSessionCommand = exports.de_CreateSecurityConfigurationCommand = void 0;
exports.de_GetWorkflowRunPropertiesCommand = exports.de_GetWorkflowRunCommand = exports.de_GetWorkflowCommand = exports.de_GetUserDefinedFunctionsCommand = exports.de_GetUserDefinedFunctionCommand = exports.de_GetUnfilteredTableMetadataCommand = exports.de_GetUnfilteredPartitionsMetadataCommand = exports.de_GetUnfilteredPartitionMetadataCommand = exports.de_GetTriggersCommand = exports.de_GetTriggerCommand = exports.de_GetTagsCommand = exports.de_GetTableVersionsCommand = exports.de_GetTableVersionCommand = exports.de_GetTablesCommand = exports.de_GetTableOptimizerCommand = exports.de_GetTableCommand = exports.de_GetStatementCommand = exports.de_GetSessionCommand = exports.de_GetSecurityConfigurationsCommand = exports.de_GetSecurityConfigurationCommand = exports.de_GetSchemaVersionsDiffCommand = exports.de_GetSchemaVersionCommand = exports.de_GetSchemaByDefinitionCommand = exports.de_GetSchemaCommand = exports.de_GetResourcePolicyCommand = exports.de_GetResourcePoliciesCommand = exports.de_GetRegistryCommand = exports.de_GetPlanCommand = exports.de_GetPartitionsCommand = exports.de_GetPartitionIndexesCommand = exports.de_GetPartitionCommand = exports.de_GetMLTransformsCommand = exports.de_GetMLTransformCommand = exports.de_GetMLTaskRunsCommand = exports.de_GetMLTaskRunCommand = exports.de_GetMappingCommand = exports.de_GetJobsCommand = exports.de_GetJobRunsCommand = exports.de_GetJobRunCommand = exports.de_GetJobBookmarkCommand = exports.de_GetJobCommand = exports.de_GetDevEndpointsCommand = exports.de_GetDevEndpointCommand = exports.de_GetDataQualityRulesetEvaluationRunCommand = exports.de_GetDataQualityRulesetCommand = exports.de_GetDataQualityRuleRecommendationRunCommand = exports.de_GetDataQualityResultCommand = exports.de_GetDataflowGraphCommand = exports.de_GetDataCatalogEncryptionSettingsCommand = exports.de_GetDatabasesCommand = void 0;
exports.de_StopSessionCommand = exports.de_StopCrawlerScheduleCommand = exports.de_StopCrawlerCommand = exports.de_StopColumnStatisticsTaskRunCommand = exports.de_StartWorkflowRunCommand = exports.de_StartTriggerCommand = exports.de_StartMLLabelingSetGenerationTaskRunCommand = exports.de_StartMLEvaluationTaskRunCommand = exports.de_StartJobRunCommand = exports.de_StartImportLabelsTaskRunCommand = exports.de_StartExportLabelsTaskRunCommand = exports.de_StartDataQualityRulesetEvaluationRunCommand = exports.de_StartDataQualityRuleRecommendationRunCommand = exports.de_StartCrawlerScheduleCommand = exports.de_StartCrawlerCommand = exports.de_StartColumnStatisticsTaskRunCommand = exports.de_StartBlueprintRunCommand = exports.de_SearchTablesCommand = exports.de_RunStatementCommand = exports.de_ResumeWorkflowRunCommand = exports.de_ResetJobBookmarkCommand = exports.de_RemoveSchemaVersionMetadataCommand = exports.de_RegisterSchemaVersionCommand = exports.de_QuerySchemaVersionMetadataCommand = exports.de_PutWorkflowRunPropertiesCommand = exports.de_PutSchemaVersionMetadataCommand = exports.de_PutResourcePolicyCommand = exports.de_PutDataCatalogEncryptionSettingsCommand = exports.de_ListWorkflowsCommand = exports.de_ListTriggersCommand = exports.de_ListTableOptimizerRunsCommand = exports.de_ListStatementsCommand = exports.de_ListSessionsCommand = exports.de_ListSchemaVersionsCommand = exports.de_ListSchemasCommand = exports.de_ListRegistriesCommand = exports.de_ListMLTransformsCommand = exports.de_ListJobsCommand = exports.de_ListDevEndpointsCommand = exports.de_ListDataQualityRulesetsCommand = exports.de_ListDataQualityRulesetEvaluationRunsCommand = exports.de_ListDataQualityRuleRecommendationRunsCommand = exports.de_ListDataQualityResultsCommand = exports.de_ListCustomEntityTypesCommand = exports.de_ListCrawlsCommand = exports.de_ListCrawlersCommand = exports.de_ListColumnStatisticsTaskRunsCommand = exports.de_ListBlueprintsCommand = exports.de_ImportCatalogToGlueCommand = exports.de_GetWorkflowRunsCommand = void 0;
exports.de_UpdateWorkflowCommand = exports.de_UpdateUserDefinedFunctionCommand = exports.de_UpdateTriggerCommand = exports.de_UpdateTableOptimizerCommand = exports.de_UpdateTableCommand = exports.de_UpdateSourceControlFromJobCommand = exports.de_UpdateSchemaCommand = exports.de_UpdateRegistryCommand = exports.de_UpdatePartitionCommand = exports.de_UpdateMLTransformCommand = exports.de_UpdateJobFromSourceControlCommand = exports.de_UpdateJobCommand = exports.de_UpdateDevEndpointCommand = exports.de_UpdateDataQualityRulesetCommand = exports.de_UpdateDatabaseCommand = exports.de_UpdateCrawlerScheduleCommand = exports.de_UpdateCrawlerCommand = exports.de_UpdateConnectionCommand = exports.de_UpdateColumnStatisticsForTableCommand = exports.de_UpdateColumnStatisticsForPartitionCommand = exports.de_UpdateClassifierCommand = exports.de_UpdateBlueprintCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_StopWorkflowRunCommand = exports.de_StopTriggerCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const GlueServiceException_1 = require("../models/GlueServiceException");
const models_0_1 = require("../models/models_0");
const models_1_1 = require("../models/models_1");
const models_2_1 = require("../models/models_2");
const se_BatchCreatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchCreatePartition");
    let body;
    body = JSON.stringify(se_BatchCreatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchCreatePartitionCommand = se_BatchCreatePartitionCommand;
const se_BatchDeleteConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteConnection");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchDeleteConnectionCommand = se_BatchDeleteConnectionCommand;
const se_BatchDeletePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeletePartition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchDeletePartitionCommand = se_BatchDeletePartitionCommand;
const se_BatchDeleteTableCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteTable");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchDeleteTableCommand = se_BatchDeleteTableCommand;
const se_BatchDeleteTableVersionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteTableVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchDeleteTableVersionCommand = se_BatchDeleteTableVersionCommand;
const se_BatchGetBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBlueprints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetBlueprintsCommand = se_BatchGetBlueprintsCommand;
const se_BatchGetCrawlersCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetCrawlers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetCrawlersCommand = se_BatchGetCrawlersCommand;
const se_BatchGetCustomEntityTypesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetCustomEntityTypes");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetCustomEntityTypesCommand = se_BatchGetCustomEntityTypesCommand;
const se_BatchGetDataQualityResultCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetDataQualityResult");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetDataQualityResultCommand = se_BatchGetDataQualityResultCommand;
const se_BatchGetDevEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetDevEndpoints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetDevEndpointsCommand = se_BatchGetDevEndpointsCommand;
const se_BatchGetJobsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetJobsCommand = se_BatchGetJobsCommand;
const se_BatchGetPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetPartition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetPartitionCommand = se_BatchGetPartitionCommand;
const se_BatchGetTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetTableOptimizer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetTableOptimizerCommand = se_BatchGetTableOptimizerCommand;
const se_BatchGetTriggersCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetTriggers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetTriggersCommand = se_BatchGetTriggersCommand;
const se_BatchGetWorkflowsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetWorkflows");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetWorkflowsCommand = se_BatchGetWorkflowsCommand;
const se_BatchStopJobRunCommand = async (input, context) => {
    const headers = sharedHeaders("BatchStopJobRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchStopJobRunCommand = se_BatchStopJobRunCommand;
const se_BatchUpdatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchUpdatePartition");
    let body;
    body = JSON.stringify(se_BatchUpdatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchUpdatePartitionCommand = se_BatchUpdatePartitionCommand;
const se_CancelDataQualityRuleRecommendationRunCommand = async (input, context) => {
    const headers = sharedHeaders("CancelDataQualityRuleRecommendationRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelDataQualityRuleRecommendationRunCommand = se_CancelDataQualityRuleRecommendationRunCommand;
const se_CancelDataQualityRulesetEvaluationRunCommand = async (input, context) => {
    const headers = sharedHeaders("CancelDataQualityRulesetEvaluationRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelDataQualityRulesetEvaluationRunCommand = se_CancelDataQualityRulesetEvaluationRunCommand;
const se_CancelMLTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("CancelMLTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelMLTaskRunCommand = se_CancelMLTaskRunCommand;
const se_CancelStatementCommand = async (input, context) => {
    const headers = sharedHeaders("CancelStatement");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CancelStatementCommand = se_CancelStatementCommand;
const se_CheckSchemaVersionValidityCommand = async (input, context) => {
    const headers = sharedHeaders("CheckSchemaVersionValidity");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CheckSchemaVersionValidityCommand = se_CheckSchemaVersionValidityCommand;
const se_CreateBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBlueprint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateBlueprintCommand = se_CreateBlueprintCommand;
const se_CreateClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("CreateClassifier");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateClassifierCommand = se_CreateClassifierCommand;
const se_CreateConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateConnection");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateConnectionCommand = se_CreateConnectionCommand;
const se_CreateCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCrawler");
    let body;
    body = JSON.stringify(se_CreateCrawlerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCrawlerCommand = se_CreateCrawlerCommand;
const se_CreateCustomEntityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCustomEntityType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCustomEntityTypeCommand = se_CreateCustomEntityTypeCommand;
const se_CreateDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDatabaseCommand = se_CreateDatabaseCommand;
const se_CreateDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataQualityRuleset");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDataQualityRulesetCommand = se_CreateDataQualityRulesetCommand;
const se_CreateDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDevEndpoint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDevEndpointCommand = se_CreateDevEndpointCommand;
const se_CreateJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateJob");
    let body;
    body = JSON.stringify(se_CreateJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateJobCommand = se_CreateJobCommand;
const se_CreateMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMLTransform");
    let body;
    body = JSON.stringify(se_CreateMLTransformRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateMLTransformCommand = se_CreateMLTransformCommand;
const se_CreatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePartition");
    let body;
    body = JSON.stringify(se_CreatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreatePartitionCommand = se_CreatePartitionCommand;
const se_CreatePartitionIndexCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePartitionIndex");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreatePartitionIndexCommand = se_CreatePartitionIndexCommand;
const se_CreateRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRegistry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRegistryCommand = se_CreateRegistryCommand;
const se_CreateSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSchema");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateSchemaCommand = se_CreateSchemaCommand;
const se_CreateScriptCommand = async (input, context) => {
    const headers = sharedHeaders("CreateScript");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateScriptCommand = se_CreateScriptCommand;
const se_CreateSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSecurityConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateSecurityConfigurationCommand = se_CreateSecurityConfigurationCommand;
const se_CreateSessionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSession");
    let body;
    body = JSON.stringify(se_CreateSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateSessionCommand = se_CreateSessionCommand;
const se_CreateTableCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTable");
    let body;
    body = JSON.stringify(se_CreateTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateTableCommand = se_CreateTableCommand;
const se_CreateTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTableOptimizer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateTableOptimizerCommand = se_CreateTableOptimizerCommand;
const se_CreateTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrigger");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateTriggerCommand = se_CreateTriggerCommand;
const se_CreateUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserDefinedFunction");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateUserDefinedFunctionCommand = se_CreateUserDefinedFunctionCommand;
const se_CreateWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkflow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateWorkflowCommand = se_CreateWorkflowCommand;
const se_DeleteBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBlueprint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteBlueprintCommand = se_DeleteBlueprintCommand;
const se_DeleteClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteClassifier");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteClassifierCommand = se_DeleteClassifierCommand;
const se_DeleteColumnStatisticsForPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteColumnStatisticsForPartition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteColumnStatisticsForPartitionCommand = se_DeleteColumnStatisticsForPartitionCommand;
const se_DeleteColumnStatisticsForTableCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteColumnStatisticsForTable");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteColumnStatisticsForTableCommand = se_DeleteColumnStatisticsForTableCommand;
const se_DeleteConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConnection");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConnectionCommand = se_DeleteConnectionCommand;
const se_DeleteCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCrawler");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCrawlerCommand = se_DeleteCrawlerCommand;
const se_DeleteCustomEntityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCustomEntityType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCustomEntityTypeCommand = se_DeleteCustomEntityTypeCommand;
const se_DeleteDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDatabaseCommand = se_DeleteDatabaseCommand;
const se_DeleteDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataQualityRuleset");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDataQualityRulesetCommand = se_DeleteDataQualityRulesetCommand;
const se_DeleteDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDevEndpoint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDevEndpointCommand = se_DeleteDevEndpointCommand;
const se_DeleteJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteJobCommand = se_DeleteJobCommand;
const se_DeleteMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMLTransform");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteMLTransformCommand = se_DeleteMLTransformCommand;
const se_DeletePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePartition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePartitionCommand = se_DeletePartitionCommand;
const se_DeletePartitionIndexCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePartitionIndex");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePartitionIndexCommand = se_DeletePartitionIndexCommand;
const se_DeleteRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegistry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRegistryCommand = se_DeleteRegistryCommand;
const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteResourcePolicyCommand = se_DeleteResourcePolicyCommand;
const se_DeleteSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSchema");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteSchemaCommand = se_DeleteSchemaCommand;
const se_DeleteSchemaVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSchemaVersions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteSchemaVersionsCommand = se_DeleteSchemaVersionsCommand;
const se_DeleteSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSecurityConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteSecurityConfigurationCommand = se_DeleteSecurityConfigurationCommand;
const se_DeleteSessionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteSessionCommand = se_DeleteSessionCommand;
const se_DeleteTableCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTable");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTableCommand = se_DeleteTableCommand;
const se_DeleteTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTableOptimizer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTableOptimizerCommand = se_DeleteTableOptimizerCommand;
const se_DeleteTableVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTableVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTableVersionCommand = se_DeleteTableVersionCommand;
const se_DeleteTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTrigger");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTriggerCommand = se_DeleteTriggerCommand;
const se_DeleteUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserDefinedFunction");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteUserDefinedFunctionCommand = se_DeleteUserDefinedFunctionCommand;
const se_DeleteWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkflow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteWorkflowCommand = se_DeleteWorkflowCommand;
const se_GetBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBlueprintCommand = se_GetBlueprintCommand;
const se_GetBlueprintRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprintRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBlueprintRunCommand = se_GetBlueprintRunCommand;
const se_GetBlueprintRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprintRuns");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBlueprintRunsCommand = se_GetBlueprintRunsCommand;
const se_GetCatalogImportStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetCatalogImportStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCatalogImportStatusCommand = se_GetCatalogImportStatusCommand;
const se_GetClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("GetClassifier");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetClassifierCommand = se_GetClassifierCommand;
const se_GetClassifiersCommand = async (input, context) => {
    const headers = sharedHeaders("GetClassifiers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetClassifiersCommand = se_GetClassifiersCommand;
const se_GetColumnStatisticsForPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsForPartition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetColumnStatisticsForPartitionCommand = se_GetColumnStatisticsForPartitionCommand;
const se_GetColumnStatisticsForTableCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsForTable");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetColumnStatisticsForTableCommand = se_GetColumnStatisticsForTableCommand;
const se_GetColumnStatisticsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetColumnStatisticsTaskRunCommand = se_GetColumnStatisticsTaskRunCommand;
const se_GetColumnStatisticsTaskRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsTaskRuns");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetColumnStatisticsTaskRunsCommand = se_GetColumnStatisticsTaskRunsCommand;
const se_GetConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetConnection");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetConnectionCommand = se_GetConnectionCommand;
const se_GetConnectionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetConnections");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetConnectionsCommand = se_GetConnectionsCommand;
const se_GetCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("GetCrawler");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCrawlerCommand = se_GetCrawlerCommand;
const se_GetCrawlerMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("GetCrawlerMetrics");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCrawlerMetricsCommand = se_GetCrawlerMetricsCommand;
const se_GetCrawlersCommand = async (input, context) => {
    const headers = sharedHeaders("GetCrawlers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCrawlersCommand = se_GetCrawlersCommand;
const se_GetCustomEntityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("GetCustomEntityType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCustomEntityTypeCommand = se_GetCustomEntityTypeCommand;
const se_GetDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("GetDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDatabaseCommand = se_GetDatabaseCommand;
const se_GetDatabasesCommand = async (input, context) => {
    const headers = sharedHeaders("GetDatabases");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDatabasesCommand = se_GetDatabasesCommand;
const se_GetDataCatalogEncryptionSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataCatalogEncryptionSettings");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDataCatalogEncryptionSettingsCommand = se_GetDataCatalogEncryptionSettingsCommand;
const se_GetDataflowGraphCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataflowGraph");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDataflowGraphCommand = se_GetDataflowGraphCommand;
const se_GetDataQualityResultCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityResult");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDataQualityResultCommand = se_GetDataQualityResultCommand;
const se_GetDataQualityRuleRecommendationRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityRuleRecommendationRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDataQualityRuleRecommendationRunCommand = se_GetDataQualityRuleRecommendationRunCommand;
const se_GetDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityRuleset");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDataQualityRulesetCommand = se_GetDataQualityRulesetCommand;
const se_GetDataQualityRulesetEvaluationRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityRulesetEvaluationRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDataQualityRulesetEvaluationRunCommand = se_GetDataQualityRulesetEvaluationRunCommand;
const se_GetDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevEndpoint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDevEndpointCommand = se_GetDevEndpointCommand;
const se_GetDevEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevEndpoints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDevEndpointsCommand = se_GetDevEndpointsCommand;
const se_GetJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetJobCommand = se_GetJobCommand;
const se_GetJobBookmarkCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobBookmark");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetJobBookmarkCommand = se_GetJobBookmarkCommand;
const se_GetJobRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetJobRunCommand = se_GetJobRunCommand;
const se_GetJobRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobRuns");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetJobRunsCommand = se_GetJobRunsCommand;
const se_GetJobsCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetJobsCommand = se_GetJobsCommand;
const se_GetMappingCommand = async (input, context) => {
    const headers = sharedHeaders("GetMapping");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMappingCommand = se_GetMappingCommand;
const se_GetMLTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMLTaskRunCommand = se_GetMLTaskRunCommand;
const se_GetMLTaskRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTaskRuns");
    let body;
    body = JSON.stringify(se_GetMLTaskRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMLTaskRunsCommand = se_GetMLTaskRunsCommand;
const se_GetMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTransform");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMLTransformCommand = se_GetMLTransformCommand;
const se_GetMLTransformsCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTransforms");
    let body;
    body = JSON.stringify(se_GetMLTransformsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetMLTransformsCommand = se_GetMLTransformsCommand;
const se_GetPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetPartition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPartitionCommand = se_GetPartitionCommand;
const se_GetPartitionIndexesCommand = async (input, context) => {
    const headers = sharedHeaders("GetPartitionIndexes");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPartitionIndexesCommand = se_GetPartitionIndexesCommand;
const se_GetPartitionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetPartitions");
    let body;
    body = JSON.stringify(se_GetPartitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPartitionsCommand = se_GetPartitionsCommand;
const se_GetPlanCommand = async (input, context) => {
    const headers = sharedHeaders("GetPlan");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPlanCommand = se_GetPlanCommand;
const se_GetRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegistry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRegistryCommand = se_GetRegistryCommand;
const se_GetResourcePoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicies");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourcePoliciesCommand = se_GetResourcePoliciesCommand;
const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourcePolicyCommand = se_GetResourcePolicyCommand;
const se_GetSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchema");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSchemaCommand = se_GetSchemaCommand;
const se_GetSchemaByDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchemaByDefinition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSchemaByDefinitionCommand = se_GetSchemaByDefinitionCommand;
const se_GetSchemaVersionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchemaVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSchemaVersionCommand = se_GetSchemaVersionCommand;
const se_GetSchemaVersionsDiffCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchemaVersionsDiff");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSchemaVersionsDiffCommand = se_GetSchemaVersionsDiffCommand;
const se_GetSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetSecurityConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSecurityConfigurationCommand = se_GetSecurityConfigurationCommand;
const se_GetSecurityConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSecurityConfigurations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSecurityConfigurationsCommand = se_GetSecurityConfigurationsCommand;
const se_GetSessionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetSessionCommand = se_GetSessionCommand;
const se_GetStatementCommand = async (input, context) => {
    const headers = sharedHeaders("GetStatement");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetStatementCommand = se_GetStatementCommand;
const se_GetTableCommand = async (input, context) => {
    const headers = sharedHeaders("GetTable");
    let body;
    body = JSON.stringify(se_GetTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTableCommand = se_GetTableCommand;
const se_GetTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("GetTableOptimizer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTableOptimizerCommand = se_GetTableOptimizerCommand;
const se_GetTablesCommand = async (input, context) => {
    const headers = sharedHeaders("GetTables");
    let body;
    body = JSON.stringify(se_GetTablesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTablesCommand = se_GetTablesCommand;
const se_GetTableVersionCommand = async (input, context) => {
    const headers = sharedHeaders("GetTableVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTableVersionCommand = se_GetTableVersionCommand;
const se_GetTableVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetTableVersions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTableVersionsCommand = se_GetTableVersionsCommand;
const se_GetTagsCommand = async (input, context) => {
    const headers = sharedHeaders("GetTags");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTagsCommand = se_GetTagsCommand;
const se_GetTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("GetTrigger");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTriggerCommand = se_GetTriggerCommand;
const se_GetTriggersCommand = async (input, context) => {
    const headers = sharedHeaders("GetTriggers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTriggersCommand = se_GetTriggersCommand;
const se_GetUnfilteredPartitionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetUnfilteredPartitionMetadata");
    let body;
    body = JSON.stringify(se_GetUnfilteredPartitionMetadataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetUnfilteredPartitionMetadataCommand = se_GetUnfilteredPartitionMetadataCommand;
const se_GetUnfilteredPartitionsMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetUnfilteredPartitionsMetadata");
    let body;
    body = JSON.stringify(se_GetUnfilteredPartitionsMetadataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetUnfilteredPartitionsMetadataCommand = se_GetUnfilteredPartitionsMetadataCommand;
const se_GetUnfilteredTableMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetUnfilteredTableMetadata");
    let body;
    body = JSON.stringify(se_GetUnfilteredTableMetadataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetUnfilteredTableMetadataCommand = se_GetUnfilteredTableMetadataCommand;
const se_GetUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserDefinedFunction");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetUserDefinedFunctionCommand = se_GetUserDefinedFunctionCommand;
const se_GetUserDefinedFunctionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserDefinedFunctions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetUserDefinedFunctionsCommand = se_GetUserDefinedFunctionsCommand;
const se_GetWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetWorkflowCommand = se_GetWorkflowCommand;
const se_GetWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflowRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetWorkflowRunCommand = se_GetWorkflowRunCommand;
const se_GetWorkflowRunPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflowRunProperties");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetWorkflowRunPropertiesCommand = se_GetWorkflowRunPropertiesCommand;
const se_GetWorkflowRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflowRuns");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetWorkflowRunsCommand = se_GetWorkflowRunsCommand;
const se_ImportCatalogToGlueCommand = async (input, context) => {
    const headers = sharedHeaders("ImportCatalogToGlue");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ImportCatalogToGlueCommand = se_ImportCatalogToGlueCommand;
const se_ListBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBlueprints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListBlueprintsCommand = se_ListBlueprintsCommand;
const se_ListColumnStatisticsTaskRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListColumnStatisticsTaskRuns");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListColumnStatisticsTaskRunsCommand = se_ListColumnStatisticsTaskRunsCommand;
const se_ListCrawlersCommand = async (input, context) => {
    const headers = sharedHeaders("ListCrawlers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCrawlersCommand = se_ListCrawlersCommand;
const se_ListCrawlsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCrawls");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCrawlsCommand = se_ListCrawlsCommand;
const se_ListCustomEntityTypesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCustomEntityTypes");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCustomEntityTypesCommand = se_ListCustomEntityTypesCommand;
const se_ListDataQualityResultsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityResults");
    let body;
    body = JSON.stringify(se_ListDataQualityResultsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDataQualityResultsCommand = se_ListDataQualityResultsCommand;
const se_ListDataQualityRuleRecommendationRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityRuleRecommendationRuns");
    let body;
    body = JSON.stringify(se_ListDataQualityRuleRecommendationRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDataQualityRuleRecommendationRunsCommand = se_ListDataQualityRuleRecommendationRunsCommand;
const se_ListDataQualityRulesetEvaluationRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityRulesetEvaluationRuns");
    let body;
    body = JSON.stringify(se_ListDataQualityRulesetEvaluationRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDataQualityRulesetEvaluationRunsCommand = se_ListDataQualityRulesetEvaluationRunsCommand;
const se_ListDataQualityRulesetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityRulesets");
    let body;
    body = JSON.stringify(se_ListDataQualityRulesetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDataQualityRulesetsCommand = se_ListDataQualityRulesetsCommand;
const se_ListDevEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevEndpoints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDevEndpointsCommand = se_ListDevEndpointsCommand;
const se_ListJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListJobsCommand = se_ListJobsCommand;
const se_ListMLTransformsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMLTransforms");
    let body;
    body = JSON.stringify(se_ListMLTransformsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListMLTransformsCommand = se_ListMLTransformsCommand;
const se_ListRegistriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListRegistries");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListRegistriesCommand = se_ListRegistriesCommand;
const se_ListSchemasCommand = async (input, context) => {
    const headers = sharedHeaders("ListSchemas");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListSchemasCommand = se_ListSchemasCommand;
const se_ListSchemaVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSchemaVersions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListSchemaVersionsCommand = se_ListSchemaVersionsCommand;
const se_ListSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSessions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListSessionsCommand = se_ListSessionsCommand;
const se_ListStatementsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStatements");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListStatementsCommand = se_ListStatementsCommand;
const se_ListTableOptimizerRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTableOptimizerRuns");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTableOptimizerRunsCommand = se_ListTableOptimizerRunsCommand;
const se_ListTriggersCommand = async (input, context) => {
    const headers = sharedHeaders("ListTriggers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTriggersCommand = se_ListTriggersCommand;
const se_ListWorkflowsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkflows");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListWorkflowsCommand = se_ListWorkflowsCommand;
const se_PutDataCatalogEncryptionSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("PutDataCatalogEncryptionSettings");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutDataCatalogEncryptionSettingsCommand = se_PutDataCatalogEncryptionSettingsCommand;
const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutResourcePolicyCommand = se_PutResourcePolicyCommand;
const se_PutSchemaVersionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("PutSchemaVersionMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutSchemaVersionMetadataCommand = se_PutSchemaVersionMetadataCommand;
const se_PutWorkflowRunPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("PutWorkflowRunProperties");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutWorkflowRunPropertiesCommand = se_PutWorkflowRunPropertiesCommand;
const se_QuerySchemaVersionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("QuerySchemaVersionMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_QuerySchemaVersionMetadataCommand = se_QuerySchemaVersionMetadataCommand;
const se_RegisterSchemaVersionCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterSchemaVersion");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterSchemaVersionCommand = se_RegisterSchemaVersionCommand;
const se_RemoveSchemaVersionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveSchemaVersionMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveSchemaVersionMetadataCommand = se_RemoveSchemaVersionMetadataCommand;
const se_ResetJobBookmarkCommand = async (input, context) => {
    const headers = sharedHeaders("ResetJobBookmark");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResetJobBookmarkCommand = se_ResetJobBookmarkCommand;
const se_ResumeWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("ResumeWorkflowRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResumeWorkflowRunCommand = se_ResumeWorkflowRunCommand;
const se_RunStatementCommand = async (input, context) => {
    const headers = sharedHeaders("RunStatement");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RunStatementCommand = se_RunStatementCommand;
const se_SearchTablesCommand = async (input, context) => {
    const headers = sharedHeaders("SearchTables");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SearchTablesCommand = se_SearchTablesCommand;
const se_StartBlueprintRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartBlueprintRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartBlueprintRunCommand = se_StartBlueprintRunCommand;
const se_StartColumnStatisticsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartColumnStatisticsTaskRun");
    let body;
    body = JSON.stringify(se_StartColumnStatisticsTaskRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartColumnStatisticsTaskRunCommand = se_StartColumnStatisticsTaskRunCommand;
const se_StartCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("StartCrawler");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartCrawlerCommand = se_StartCrawlerCommand;
const se_StartCrawlerScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StartCrawlerSchedule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartCrawlerScheduleCommand = se_StartCrawlerScheduleCommand;
const se_StartDataQualityRuleRecommendationRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartDataQualityRuleRecommendationRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartDataQualityRuleRecommendationRunCommand = se_StartDataQualityRuleRecommendationRunCommand;
const se_StartDataQualityRulesetEvaluationRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartDataQualityRulesetEvaluationRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartDataQualityRulesetEvaluationRunCommand = se_StartDataQualityRulesetEvaluationRunCommand;
const se_StartExportLabelsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartExportLabelsTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartExportLabelsTaskRunCommand = se_StartExportLabelsTaskRunCommand;
const se_StartImportLabelsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartImportLabelsTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartImportLabelsTaskRunCommand = se_StartImportLabelsTaskRunCommand;
const se_StartJobRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartJobRun");
    let body;
    body = JSON.stringify(se_StartJobRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartJobRunCommand = se_StartJobRunCommand;
const se_StartMLEvaluationTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartMLEvaluationTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartMLEvaluationTaskRunCommand = se_StartMLEvaluationTaskRunCommand;
const se_StartMLLabelingSetGenerationTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartMLLabelingSetGenerationTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartMLLabelingSetGenerationTaskRunCommand = se_StartMLLabelingSetGenerationTaskRunCommand;
const se_StartTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("StartTrigger");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartTriggerCommand = se_StartTriggerCommand;
const se_StartWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartWorkflowRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartWorkflowRunCommand = se_StartWorkflowRunCommand;
const se_StopColumnStatisticsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StopColumnStatisticsTaskRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopColumnStatisticsTaskRunCommand = se_StopColumnStatisticsTaskRunCommand;
const se_StopCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("StopCrawler");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopCrawlerCommand = se_StopCrawlerCommand;
const se_StopCrawlerScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StopCrawlerSchedule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopCrawlerScheduleCommand = se_StopCrawlerScheduleCommand;
const se_StopSessionCommand = async (input, context) => {
    const headers = sharedHeaders("StopSession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopSessionCommand = se_StopSessionCommand;
const se_StopTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("StopTrigger");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopTriggerCommand = se_StopTriggerCommand;
const se_StopWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("StopWorkflowRun");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopWorkflowRunCommand = se_StopWorkflowRunCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBlueprint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateBlueprintCommand = se_UpdateBlueprintCommand;
const se_UpdateClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateClassifier");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateClassifierCommand = se_UpdateClassifierCommand;
const se_UpdateColumnStatisticsForPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateColumnStatisticsForPartition");
    let body;
    body = JSON.stringify(se_UpdateColumnStatisticsForPartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateColumnStatisticsForPartitionCommand = se_UpdateColumnStatisticsForPartitionCommand;
const se_UpdateColumnStatisticsForTableCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateColumnStatisticsForTable");
    let body;
    body = JSON.stringify(se_UpdateColumnStatisticsForTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateColumnStatisticsForTableCommand = se_UpdateColumnStatisticsForTableCommand;
const se_UpdateConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateConnection");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateConnectionCommand = se_UpdateConnectionCommand;
const se_UpdateCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCrawler");
    let body;
    body = JSON.stringify(se_UpdateCrawlerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateCrawlerCommand = se_UpdateCrawlerCommand;
const se_UpdateCrawlerScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCrawlerSchedule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateCrawlerScheduleCommand = se_UpdateCrawlerScheduleCommand;
const se_UpdateDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDatabaseCommand = se_UpdateDatabaseCommand;
const se_UpdateDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDataQualityRuleset");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDataQualityRulesetCommand = se_UpdateDataQualityRulesetCommand;
const se_UpdateDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDevEndpoint");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDevEndpointCommand = se_UpdateDevEndpointCommand;
const se_UpdateJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateJob");
    let body;
    body = JSON.stringify(se_UpdateJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateJobCommand = se_UpdateJobCommand;
const se_UpdateJobFromSourceControlCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateJobFromSourceControl");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateJobFromSourceControlCommand = se_UpdateJobFromSourceControlCommand;
const se_UpdateMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMLTransform");
    let body;
    body = JSON.stringify(se_UpdateMLTransformRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateMLTransformCommand = se_UpdateMLTransformCommand;
const se_UpdatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePartition");
    let body;
    body = JSON.stringify(se_UpdatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdatePartitionCommand = se_UpdatePartitionCommand;
const se_UpdateRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRegistry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateRegistryCommand = se_UpdateRegistryCommand;
const se_UpdateSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSchema");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateSchemaCommand = se_UpdateSchemaCommand;
const se_UpdateSourceControlFromJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSourceControlFromJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateSourceControlFromJobCommand = se_UpdateSourceControlFromJobCommand;
const se_UpdateTableCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTable");
    let body;
    body = JSON.stringify(se_UpdateTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateTableCommand = se_UpdateTableCommand;
const se_UpdateTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTableOptimizer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateTableOptimizerCommand = se_UpdateTableOptimizerCommand;
const se_UpdateTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrigger");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateTriggerCommand = se_UpdateTriggerCommand;
const se_UpdateUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserDefinedFunction");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateUserDefinedFunctionCommand = se_UpdateUserDefinedFunctionCommand;
const se_UpdateWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkflow");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateWorkflowCommand = se_UpdateWorkflowCommand;
const de_BatchCreatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchCreatePartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchCreatePartitionCommand = de_BatchCreatePartitionCommand;
const de_BatchCreatePartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchDeleteConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDeleteConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchDeleteConnectionCommand = de_BatchDeleteConnectionCommand;
const de_BatchDeleteConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchDeletePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDeletePartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchDeletePartitionCommand = de_BatchDeletePartitionCommand;
const de_BatchDeletePartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchDeleteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDeleteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchDeleteTableCommand = de_BatchDeleteTableCommand;
const de_BatchDeleteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.glue#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchDeleteTableVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDeleteTableVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchDeleteTableVersionCommand = de_BatchDeleteTableVersionCommand;
const de_BatchDeleteTableVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetBlueprintsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBlueprintsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetBlueprintsCommand = de_BatchGetBlueprintsCommand;
const de_BatchGetBlueprintsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetCrawlersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetCrawlersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetCrawlersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetCrawlersCommand = de_BatchGetCrawlersCommand;
const de_BatchGetCrawlersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetCustomEntityTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetCustomEntityTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetCustomEntityTypesCommand = de_BatchGetCustomEntityTypesCommand;
const de_BatchGetCustomEntityTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetDataQualityResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetDataQualityResultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetDataQualityResultResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetDataQualityResultCommand = de_BatchGetDataQualityResultCommand;
const de_BatchGetDataQualityResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetDevEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetDevEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetDevEndpointsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetDevEndpointsCommand = de_BatchGetDevEndpointsCommand;
const de_BatchGetDevEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetJobsCommand = de_BatchGetJobsCommand;
const de_BatchGetJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetPartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetPartitionCommand = de_BatchGetPartitionCommand;
const de_BatchGetPartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.glue#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetTableOptimizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetTableOptimizerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetTableOptimizerCommand = de_BatchGetTableOptimizerCommand;
const de_BatchGetTableOptimizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetTriggersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetTriggersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetTriggersCommand = de_BatchGetTriggersCommand;
const de_BatchGetTriggersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetWorkflowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetWorkflowsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetWorkflowsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetWorkflowsCommand = de_BatchGetWorkflowsCommand;
const de_BatchGetWorkflowsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchStopJobRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchStopJobRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchStopJobRunCommand = de_BatchStopJobRunCommand;
const de_BatchStopJobRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchUpdatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchUpdatePartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchUpdatePartitionCommand = de_BatchUpdatePartitionCommand;
const de_BatchUpdatePartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CancelDataQualityRuleRecommendationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelDataQualityRuleRecommendationRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CancelDataQualityRuleRecommendationRunCommand = de_CancelDataQualityRuleRecommendationRunCommand;
const de_CancelDataQualityRuleRecommendationRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CancelDataQualityRulesetEvaluationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelDataQualityRulesetEvaluationRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CancelDataQualityRulesetEvaluationRunCommand = de_CancelDataQualityRulesetEvaluationRunCommand;
const de_CancelDataQualityRulesetEvaluationRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CancelMLTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelMLTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CancelMLTaskRunCommand = de_CancelMLTaskRunCommand;
const de_CancelMLTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CancelStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CancelStatementCommand = de_CancelStatementCommand;
const de_CancelStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalSessionStateException":
        case "com.amazonaws.glue#IllegalSessionStateException":
            throw await de_IllegalSessionStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CheckSchemaVersionValidityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CheckSchemaVersionValidityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CheckSchemaVersionValidityCommand = de_CheckSchemaVersionValidityCommand;
const de_CheckSchemaVersionValidityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateBlueprintCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateBlueprintCommand = de_CreateBlueprintCommand;
const de_CreateBlueprintCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateClassifierCommand = de_CreateClassifierCommand;
const de_CreateClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateConnectionCommand = de_CreateConnectionCommand;
const de_CreateConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCrawlerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateCrawlerCommand = de_CreateCrawlerCommand;
const de_CreateCrawlerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateCustomEntityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCustomEntityTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateCustomEntityTypeCommand = de_CreateCustomEntityTypeCommand;
const de_CreateCustomEntityTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDatabaseCommand = de_CreateDatabaseCommand;
const de_CreateDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "FederatedResourceAlreadyExistsException":
        case "com.amazonaws.glue#FederatedResourceAlreadyExistsException":
            throw await de_FederatedResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDataQualityRulesetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDataQualityRulesetCommand = de_CreateDataQualityRulesetCommand;
const de_CreateDataQualityRulesetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDevEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDevEndpointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDevEndpointCommand = de_CreateDevEndpointCommand;
const de_CreateDevEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateJobCommand = de_CreateJobCommand;
const de_CreateJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateMLTransformCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateMLTransformCommand = de_CreateMLTransformCommand;
const de_CreateMLTransformCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreatePartitionCommand = de_CreatePartitionCommand;
const de_CreatePartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreatePartitionIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePartitionIndexCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreatePartitionIndexCommand = de_CreatePartitionIndexCommand;
const de_CreatePartitionIndexCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRegistryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateRegistryCommand = de_CreateRegistryCommand;
const de_CreateRegistryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSchemaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateSchemaCommand = de_CreateSchemaCommand;
const de_CreateSchemaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateScriptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateScriptCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateScriptCommand = de_CreateScriptCommand;
const de_CreateScriptCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSecurityConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSecurityConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateSecurityConfigurationCommand = de_CreateSecurityConfigurationCommand;
const de_CreateSecurityConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSessionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateSessionCommand = de_CreateSessionCommand;
const de_CreateSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateTableCommand = de_CreateTableCommand;
const de_CreateTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.glue#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTableOptimizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateTableOptimizerCommand = de_CreateTableOptimizerCommand;
const de_CreateTableOptimizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTriggerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateTriggerCommand = de_CreateTriggerCommand;
const de_CreateTriggerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateUserDefinedFunctionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateUserDefinedFunctionCommand = de_CreateUserDefinedFunctionCommand;
const de_CreateUserDefinedFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateWorkflowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateWorkflowCommand = de_CreateWorkflowCommand;
const de_CreateWorkflowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteBlueprintCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteBlueprintCommand = de_DeleteBlueprintCommand;
const de_DeleteBlueprintCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteClassifierCommand = de_DeleteClassifierCommand;
const de_DeleteClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteColumnStatisticsForPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteColumnStatisticsForPartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteColumnStatisticsForPartitionCommand = de_DeleteColumnStatisticsForPartitionCommand;
const de_DeleteColumnStatisticsForPartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteColumnStatisticsForTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteColumnStatisticsForTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteColumnStatisticsForTableCommand = de_DeleteColumnStatisticsForTableCommand;
const de_DeleteColumnStatisticsForTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteConnectionCommand = de_DeleteConnectionCommand;
const de_DeleteConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCrawlerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteCrawlerCommand = de_DeleteCrawlerCommand;
const de_DeleteCrawlerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CrawlerRunningException":
        case "com.amazonaws.glue#CrawlerRunningException":
            throw await de_CrawlerRunningExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "SchedulerTransitioningException":
        case "com.amazonaws.glue#SchedulerTransitioningException":
            throw await de_SchedulerTransitioningExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteCustomEntityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCustomEntityTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteCustomEntityTypeCommand = de_DeleteCustomEntityTypeCommand;
const de_DeleteCustomEntityTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDatabaseCommand = de_DeleteDatabaseCommand;
const de_DeleteDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDataQualityRulesetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDataQualityRulesetCommand = de_DeleteDataQualityRulesetCommand;
const de_DeleteDataQualityRulesetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDevEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDevEndpointCommand = de_DeleteDevEndpointCommand;
const de_DeleteDevEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteJobCommand = de_DeleteJobCommand;
const de_DeleteJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteMLTransformCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteMLTransformCommand = de_DeleteMLTransformCommand;
const de_DeleteMLTransformCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeletePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeletePartitionCommand = de_DeletePartitionCommand;
const de_DeletePartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeletePartitionIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePartitionIndexCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeletePartitionIndexCommand = de_DeletePartitionIndexCommand;
const de_DeletePartitionIndexCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.glue#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRegistryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRegistryCommand = de_DeleteRegistryCommand;
const de_DeleteRegistryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteResourcePolicyCommand = de_DeleteResourcePolicyCommand;
const de_DeleteResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConditionCheckFailureException":
        case "com.amazonaws.glue#ConditionCheckFailureException":
            throw await de_ConditionCheckFailureExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSchemaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteSchemaCommand = de_DeleteSchemaCommand;
const de_DeleteSchemaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteSchemaVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSchemaVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteSchemaVersionsCommand = de_DeleteSchemaVersionsCommand;
const de_DeleteSchemaVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSecurityConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteSecurityConfigurationCommand = de_DeleteSecurityConfigurationCommand;
const de_DeleteSecurityConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteSessionCommand = de_DeleteSessionCommand;
const de_DeleteSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "IllegalSessionStateException":
        case "com.amazonaws.glue#IllegalSessionStateException":
            throw await de_IllegalSessionStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteTableCommand = de_DeleteTableCommand;
const de_DeleteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.glue#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTableOptimizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteTableOptimizerCommand = de_DeleteTableOptimizerCommand;
const de_DeleteTableOptimizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteTableVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTableVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteTableVersionCommand = de_DeleteTableVersionCommand;
const de_DeleteTableVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTriggerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteTriggerCommand = de_DeleteTriggerCommand;
const de_DeleteTriggerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteUserDefinedFunctionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteUserDefinedFunctionCommand = de_DeleteUserDefinedFunctionCommand;
const de_DeleteUserDefinedFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteWorkflowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteWorkflowCommand = de_DeleteWorkflowCommand;
const de_DeleteWorkflowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBlueprintCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlueprintResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBlueprintCommand = de_GetBlueprintCommand;
const de_GetBlueprintCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBlueprintRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBlueprintRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlueprintRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBlueprintRunCommand = de_GetBlueprintRunCommand;
const de_GetBlueprintRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBlueprintRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBlueprintRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlueprintRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBlueprintRunsCommand = de_GetBlueprintRunsCommand;
const de_GetBlueprintRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCatalogImportStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCatalogImportStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCatalogImportStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCatalogImportStatusCommand = de_GetCatalogImportStatusCommand;
const de_GetCatalogImportStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetClassifierResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetClassifierCommand = de_GetClassifierCommand;
const de_GetClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetClassifiersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetClassifiersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetClassifiersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetClassifiersCommand = de_GetClassifiersCommand;
const de_GetClassifiersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetColumnStatisticsForPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetColumnStatisticsForPartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsForPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetColumnStatisticsForPartitionCommand = de_GetColumnStatisticsForPartitionCommand;
const de_GetColumnStatisticsForPartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetColumnStatisticsForTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetColumnStatisticsForTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsForTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetColumnStatisticsForTableCommand = de_GetColumnStatisticsForTableCommand;
const de_GetColumnStatisticsForTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetColumnStatisticsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetColumnStatisticsTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsTaskRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetColumnStatisticsTaskRunCommand = de_GetColumnStatisticsTaskRunCommand;
const de_GetColumnStatisticsTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetColumnStatisticsTaskRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetColumnStatisticsTaskRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsTaskRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetColumnStatisticsTaskRunsCommand = de_GetColumnStatisticsTaskRunsCommand;
const de_GetColumnStatisticsTaskRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetConnectionCommand = de_GetConnectionCommand;
const de_GetConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConnectionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetConnectionsCommand = de_GetConnectionsCommand;
const de_GetConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCrawlerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCrawlerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCrawlerCommand = de_GetCrawlerCommand;
const de_GetCrawlerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCrawlerMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCrawlerMetricsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCrawlerMetricsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCrawlerMetricsCommand = de_GetCrawlerMetricsCommand;
const de_GetCrawlerMetricsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCrawlersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCrawlersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCrawlersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCrawlersCommand = de_GetCrawlersCommand;
const de_GetCrawlersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCustomEntityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCustomEntityTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCustomEntityTypeCommand = de_GetCustomEntityTypeCommand;
const de_GetCustomEntityTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDatabaseResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDatabaseCommand = de_GetDatabaseCommand;
const de_GetDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDatabasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDatabasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDatabasesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDatabasesCommand = de_GetDatabasesCommand;
const de_GetDatabasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDataCatalogEncryptionSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDataCatalogEncryptionSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDataCatalogEncryptionSettingsCommand = de_GetDataCatalogEncryptionSettingsCommand;
const de_GetDataCatalogEncryptionSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDataflowGraphCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDataflowGraphCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDataflowGraphCommand = de_GetDataflowGraphCommand;
const de_GetDataflowGraphCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDataQualityResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDataQualityResultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityResultResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDataQualityResultCommand = de_GetDataQualityResultCommand;
const de_GetDataQualityResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDataQualityRuleRecommendationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDataQualityRuleRecommendationRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityRuleRecommendationRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDataQualityRuleRecommendationRunCommand = de_GetDataQualityRuleRecommendationRunCommand;
const de_GetDataQualityRuleRecommendationRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDataQualityRulesetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityRulesetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDataQualityRulesetCommand = de_GetDataQualityRulesetCommand;
const de_GetDataQualityRulesetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDataQualityRulesetEvaluationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDataQualityRulesetEvaluationRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityRulesetEvaluationRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDataQualityRulesetEvaluationRunCommand = de_GetDataQualityRulesetEvaluationRunCommand;
const de_GetDataQualityRulesetEvaluationRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDevEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDevEndpointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDevEndpointCommand = de_GetDevEndpointCommand;
const de_GetDevEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDevEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDevEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDevEndpointsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDevEndpointsCommand = de_GetDevEndpointsCommand;
const de_GetDevEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetJobCommand = de_GetJobCommand;
const de_GetJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetJobBookmarkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetJobBookmarkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetJobBookmarkCommand = de_GetJobBookmarkCommand;
const de_GetJobBookmarkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetJobRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetJobRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetJobRunCommand = de_GetJobRunCommand;
const de_GetJobRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetJobRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetJobRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetJobRunsCommand = de_GetJobRunsCommand;
const de_GetJobRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetJobsCommand = de_GetJobsCommand;
const de_GetJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetMappingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetMappingCommand = de_GetMappingCommand;
const de_GetMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMLTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetMLTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTaskRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetMLTaskRunCommand = de_GetMLTaskRunCommand;
const de_GetMLTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMLTaskRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetMLTaskRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTaskRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetMLTaskRunsCommand = de_GetMLTaskRunsCommand;
const de_GetMLTaskRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetMLTransformCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTransformResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetMLTransformCommand = de_GetMLTransformCommand;
const de_GetMLTransformCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMLTransformsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetMLTransformsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTransformsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetMLTransformsCommand = de_GetMLTransformsCommand;
const de_GetMLTransformsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetPartitionCommand = de_GetPartitionCommand;
const de_GetPartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetPartitionIndexesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPartitionIndexesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetPartitionIndexesCommand = de_GetPartitionIndexesCommand;
const de_GetPartitionIndexesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.glue#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetPartitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPartitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPartitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetPartitionsCommand = de_GetPartitionsCommand;
const de_GetPartitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.glue#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.glue#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPlanCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetPlanCommand = de_GetPlanCommand;
const de_GetPlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRegistryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRegistryCommand = de_GetRegistryCommand;
const de_GetRegistryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetResourcePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourcePoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourcePoliciesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetResourcePoliciesCommand = de_GetResourcePoliciesCommand;
const de_GetResourcePoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetResourcePolicyCommand = de_GetResourcePolicyCommand;
const de_GetResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSchemaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetSchemaCommand = de_GetSchemaCommand;
const de_GetSchemaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSchemaByDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSchemaByDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetSchemaByDefinitionCommand = de_GetSchemaByDefinitionCommand;
const de_GetSchemaByDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSchemaVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSchemaVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetSchemaVersionCommand = de_GetSchemaVersionCommand;
const de_GetSchemaVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSchemaVersionsDiffCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSchemaVersionsDiffCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetSchemaVersionsDiffCommand = de_GetSchemaVersionsDiffCommand;
const de_GetSchemaVersionsDiffCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSecurityConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSecurityConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetSecurityConfigurationCommand = de_GetSecurityConfigurationCommand;
const de_GetSecurityConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSecurityConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSecurityConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSecurityConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetSecurityConfigurationsCommand = de_GetSecurityConfigurationsCommand;
const de_GetSecurityConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSessionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetSessionCommand = de_GetSessionCommand;
const de_GetSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStatementResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetStatementCommand = de_GetStatementCommand;
const de_GetStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalSessionStateException":
        case "com.amazonaws.glue#IllegalSessionStateException":
            throw await de_IllegalSessionStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTableCommand = de_GetTableCommand;
const de_GetTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.glue#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTableOptimizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableOptimizerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTableOptimizerCommand = de_GetTableOptimizerCommand;
const de_GetTableOptimizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTablesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTablesCommand = de_GetTablesCommand;
const de_GetTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTableVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTableVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTableVersionCommand = de_GetTableVersionCommand;
const de_GetTableVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTableVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTableVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTableVersionsCommand = de_GetTableVersionsCommand;
const de_GetTableVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTagsCommand = de_GetTagsCommand;
const de_GetTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTriggerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTriggerCommand = de_GetTriggerCommand;
const de_GetTriggerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTriggersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTriggersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTriggersCommand = de_GetTriggersCommand;
const de_GetTriggersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetUnfilteredPartitionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetUnfilteredPartitionMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUnfilteredPartitionMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetUnfilteredPartitionMetadataCommand = de_GetUnfilteredPartitionMetadataCommand;
const de_GetUnfilteredPartitionMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "PermissionTypeMismatchException":
        case "com.amazonaws.glue#PermissionTypeMismatchException":
            throw await de_PermissionTypeMismatchExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetUnfilteredPartitionsMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetUnfilteredPartitionsMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUnfilteredPartitionsMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetUnfilteredPartitionsMetadataCommand = de_GetUnfilteredPartitionsMetadataCommand;
const de_GetUnfilteredPartitionsMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "PermissionTypeMismatchException":
        case "com.amazonaws.glue#PermissionTypeMismatchException":
            throw await de_PermissionTypeMismatchExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetUnfilteredTableMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetUnfilteredTableMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUnfilteredTableMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetUnfilteredTableMetadataCommand = de_GetUnfilteredTableMetadataCommand;
const de_GetUnfilteredTableMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "PermissionTypeMismatchException":
        case "com.amazonaws.glue#PermissionTypeMismatchException":
            throw await de_PermissionTypeMismatchExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetUserDefinedFunctionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUserDefinedFunctionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetUserDefinedFunctionCommand = de_GetUserDefinedFunctionCommand;
const de_GetUserDefinedFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetUserDefinedFunctionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetUserDefinedFunctionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUserDefinedFunctionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetUserDefinedFunctionsCommand = de_GetUserDefinedFunctionsCommand;
const de_GetUserDefinedFunctionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetWorkflowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWorkflowResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetWorkflowCommand = de_GetWorkflowCommand;
const de_GetWorkflowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetWorkflowRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWorkflowRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetWorkflowRunCommand = de_GetWorkflowRunCommand;
const de_GetWorkflowRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetWorkflowRunPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetWorkflowRunPropertiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetWorkflowRunPropertiesCommand = de_GetWorkflowRunPropertiesCommand;
const de_GetWorkflowRunPropertiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetWorkflowRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetWorkflowRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWorkflowRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetWorkflowRunsCommand = de_GetWorkflowRunsCommand;
const de_GetWorkflowRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ImportCatalogToGlueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportCatalogToGlueCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ImportCatalogToGlueCommand = de_ImportCatalogToGlueCommand;
const de_ImportCatalogToGlueCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListBlueprintsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListBlueprintsCommand = de_ListBlueprintsCommand;
const de_ListBlueprintsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListColumnStatisticsTaskRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListColumnStatisticsTaskRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListColumnStatisticsTaskRunsCommand = de_ListColumnStatisticsTaskRunsCommand;
const de_ListColumnStatisticsTaskRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCrawlersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCrawlersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCrawlersCommand = de_ListCrawlersCommand;
const de_ListCrawlersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCrawlsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCrawlsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCrawlsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCrawlsCommand = de_ListCrawlsCommand;
const de_ListCrawlsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCustomEntityTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCustomEntityTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCustomEntityTypesCommand = de_ListCustomEntityTypesCommand;
const de_ListCustomEntityTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDataQualityResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDataQualityResultsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityResultsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDataQualityResultsCommand = de_ListDataQualityResultsCommand;
const de_ListDataQualityResultsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDataQualityRuleRecommendationRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDataQualityRuleRecommendationRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityRuleRecommendationRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDataQualityRuleRecommendationRunsCommand = de_ListDataQualityRuleRecommendationRunsCommand;
const de_ListDataQualityRuleRecommendationRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDataQualityRulesetEvaluationRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDataQualityRulesetEvaluationRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityRulesetEvaluationRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDataQualityRulesetEvaluationRunsCommand = de_ListDataQualityRulesetEvaluationRunsCommand;
const de_ListDataQualityRulesetEvaluationRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDataQualityRulesetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDataQualityRulesetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityRulesetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDataQualityRulesetsCommand = de_ListDataQualityRulesetsCommand;
const de_ListDataQualityRulesetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDevEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDevEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDevEndpointsCommand = de_ListDevEndpointsCommand;
const de_ListDevEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListJobsCommand = de_ListJobsCommand;
const de_ListJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListMLTransformsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListMLTransformsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListMLTransformsCommand = de_ListMLTransformsCommand;
const de_ListMLTransformsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListRegistriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListRegistriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListRegistriesCommand = de_ListRegistriesCommand;
const de_ListRegistriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListSchemasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSchemasCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListSchemasCommand = de_ListSchemasCommand;
const de_ListSchemasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListSchemaVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSchemaVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListSchemaVersionsCommand = de_ListSchemaVersionsCommand;
const de_ListSchemaVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSessionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSessionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListSessionsCommand = de_ListSessionsCommand;
const de_ListSessionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListStatementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListStatementsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStatementsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListStatementsCommand = de_ListStatementsCommand;
const de_ListStatementsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalSessionStateException":
        case "com.amazonaws.glue#IllegalSessionStateException":
            throw await de_IllegalSessionStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTableOptimizerRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTableOptimizerRunsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTableOptimizerRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTableOptimizerRunsCommand = de_ListTableOptimizerRunsCommand;
const de_ListTableOptimizerRunsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTriggersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTriggersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTriggersCommand = de_ListTriggersCommand;
const de_ListTriggersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListWorkflowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListWorkflowsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListWorkflowsCommand = de_ListWorkflowsCommand;
const de_ListWorkflowsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutDataCatalogEncryptionSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutDataCatalogEncryptionSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutDataCatalogEncryptionSettingsCommand = de_PutDataCatalogEncryptionSettingsCommand;
const de_PutDataCatalogEncryptionSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutResourcePolicyCommand = de_PutResourcePolicyCommand;
const de_PutResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConditionCheckFailureException":
        case "com.amazonaws.glue#ConditionCheckFailureException":
            throw await de_ConditionCheckFailureExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutSchemaVersionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutSchemaVersionMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutSchemaVersionMetadataCommand = de_PutSchemaVersionMetadataCommand;
const de_PutSchemaVersionMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutWorkflowRunPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutWorkflowRunPropertiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutWorkflowRunPropertiesCommand = de_PutWorkflowRunPropertiesCommand;
const de_PutWorkflowRunPropertiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_QuerySchemaVersionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_QuerySchemaVersionMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_QuerySchemaVersionMetadataCommand = de_QuerySchemaVersionMetadataCommand;
const de_QuerySchemaVersionMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RegisterSchemaVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterSchemaVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RegisterSchemaVersionCommand = de_RegisterSchemaVersionCommand;
const de_RegisterSchemaVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RemoveSchemaVersionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveSchemaVersionMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RemoveSchemaVersionMetadataCommand = de_RemoveSchemaVersionMetadataCommand;
const de_RemoveSchemaVersionMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ResetJobBookmarkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetJobBookmarkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ResetJobBookmarkCommand = de_ResetJobBookmarkCommand;
const de_ResetJobBookmarkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ResumeWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResumeWorkflowRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ResumeWorkflowRunCommand = de_ResumeWorkflowRunCommand;
const de_ResumeWorkflowRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentRunsExceededException":
        case "com.amazonaws.glue#ConcurrentRunsExceededException":
            throw await de_ConcurrentRunsExceededExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalWorkflowStateException":
        case "com.amazonaws.glue#IllegalWorkflowStateException":
            throw await de_IllegalWorkflowStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RunStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RunStatementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RunStatementCommand = de_RunStatementCommand;
const de_RunStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalSessionStateException":
        case "com.amazonaws.glue#IllegalSessionStateException":
            throw await de_IllegalSessionStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_SearchTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SearchTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchTablesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SearchTablesCommand = de_SearchTablesCommand;
const de_SearchTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartBlueprintRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartBlueprintRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartBlueprintRunCommand = de_StartBlueprintRunCommand;
const de_StartBlueprintRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalBlueprintStateException":
        case "com.amazonaws.glue#IllegalBlueprintStateException":
            throw await de_IllegalBlueprintStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartColumnStatisticsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartColumnStatisticsTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartColumnStatisticsTaskRunCommand = de_StartColumnStatisticsTaskRunCommand;
const de_StartColumnStatisticsTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ColumnStatisticsTaskRunningException":
        case "com.amazonaws.glue#ColumnStatisticsTaskRunningException":
            throw await de_ColumnStatisticsTaskRunningExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartCrawlerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartCrawlerCommand = de_StartCrawlerCommand;
const de_StartCrawlerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CrawlerRunningException":
        case "com.amazonaws.glue#CrawlerRunningException":
            throw await de_CrawlerRunningExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartCrawlerScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartCrawlerScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartCrawlerScheduleCommand = de_StartCrawlerScheduleCommand;
const de_StartCrawlerScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "NoScheduleException":
        case "com.amazonaws.glue#NoScheduleException":
            throw await de_NoScheduleExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "SchedulerRunningException":
        case "com.amazonaws.glue#SchedulerRunningException":
            throw await de_SchedulerRunningExceptionRes(parsedOutput, context);
        case "SchedulerTransitioningException":
        case "com.amazonaws.glue#SchedulerTransitioningException":
            throw await de_SchedulerTransitioningExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartDataQualityRuleRecommendationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartDataQualityRuleRecommendationRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartDataQualityRuleRecommendationRunCommand = de_StartDataQualityRuleRecommendationRunCommand;
const de_StartDataQualityRuleRecommendationRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.glue#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartDataQualityRulesetEvaluationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartDataQualityRulesetEvaluationRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartDataQualityRulesetEvaluationRunCommand = de_StartDataQualityRulesetEvaluationRunCommand;
const de_StartDataQualityRulesetEvaluationRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.glue#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartExportLabelsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartExportLabelsTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartExportLabelsTaskRunCommand = de_StartExportLabelsTaskRunCommand;
const de_StartExportLabelsTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartImportLabelsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartImportLabelsTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartImportLabelsTaskRunCommand = de_StartImportLabelsTaskRunCommand;
const de_StartImportLabelsTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartJobRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartJobRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartJobRunCommand = de_StartJobRunCommand;
const de_StartJobRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentRunsExceededException":
        case "com.amazonaws.glue#ConcurrentRunsExceededException":
            throw await de_ConcurrentRunsExceededExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartMLEvaluationTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartMLEvaluationTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartMLEvaluationTaskRunCommand = de_StartMLEvaluationTaskRunCommand;
const de_StartMLEvaluationTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentRunsExceededException":
        case "com.amazonaws.glue#ConcurrentRunsExceededException":
            throw await de_ConcurrentRunsExceededExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "MLTransformNotReadyException":
        case "com.amazonaws.glue#MLTransformNotReadyException":
            throw await de_MLTransformNotReadyExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartMLLabelingSetGenerationTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartMLLabelingSetGenerationTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartMLLabelingSetGenerationTaskRunCommand = de_StartMLLabelingSetGenerationTaskRunCommand;
const de_StartMLLabelingSetGenerationTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentRunsExceededException":
        case "com.amazonaws.glue#ConcurrentRunsExceededException":
            throw await de_ConcurrentRunsExceededExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartTriggerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartTriggerCommand = de_StartTriggerCommand;
const de_StartTriggerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentRunsExceededException":
        case "com.amazonaws.glue#ConcurrentRunsExceededException":
            throw await de_ConcurrentRunsExceededExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartWorkflowRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartWorkflowRunCommand = de_StartWorkflowRunCommand;
const de_StartWorkflowRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentRunsExceededException":
        case "com.amazonaws.glue#ConcurrentRunsExceededException":
            throw await de_ConcurrentRunsExceededExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopColumnStatisticsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopColumnStatisticsTaskRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopColumnStatisticsTaskRunCommand = de_StopColumnStatisticsTaskRunCommand;
const de_StopColumnStatisticsTaskRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ColumnStatisticsTaskNotRunningException":
        case "com.amazonaws.glue#ColumnStatisticsTaskNotRunningException":
            throw await de_ColumnStatisticsTaskNotRunningExceptionRes(parsedOutput, context);
        case "ColumnStatisticsTaskStoppingException":
        case "com.amazonaws.glue#ColumnStatisticsTaskStoppingException":
            throw await de_ColumnStatisticsTaskStoppingExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopCrawlerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopCrawlerCommand = de_StopCrawlerCommand;
const de_StopCrawlerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CrawlerNotRunningException":
        case "com.amazonaws.glue#CrawlerNotRunningException":
            throw await de_CrawlerNotRunningExceptionRes(parsedOutput, context);
        case "CrawlerStoppingException":
        case "com.amazonaws.glue#CrawlerStoppingException":
            throw await de_CrawlerStoppingExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopCrawlerScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopCrawlerScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopCrawlerScheduleCommand = de_StopCrawlerScheduleCommand;
const de_StopCrawlerScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "SchedulerNotRunningException":
        case "com.amazonaws.glue#SchedulerNotRunningException":
            throw await de_SchedulerNotRunningExceptionRes(parsedOutput, context);
        case "SchedulerTransitioningException":
        case "com.amazonaws.glue#SchedulerTransitioningException":
            throw await de_SchedulerTransitioningExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopSessionCommand = de_StopSessionCommand;
const de_StopSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "IllegalSessionStateException":
        case "com.amazonaws.glue#IllegalSessionStateException":
            throw await de_IllegalSessionStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTriggerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopTriggerCommand = de_StopTriggerCommand;
const de_StopTriggerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopWorkflowRunCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopWorkflowRunCommand = de_StopWorkflowRunCommand;
const de_StopWorkflowRunCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalWorkflowStateException":
        case "com.amazonaws.glue#IllegalWorkflowStateException":
            throw await de_IllegalWorkflowStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateBlueprintCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateBlueprintCommand = de_UpdateBlueprintCommand;
const de_UpdateBlueprintCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IllegalBlueprintStateException":
        case "com.amazonaws.glue#IllegalBlueprintStateException":
            throw await de_IllegalBlueprintStateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateClassifierCommand = de_UpdateClassifierCommand;
const de_UpdateClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "VersionMismatchException":
        case "com.amazonaws.glue#VersionMismatchException":
            throw await de_VersionMismatchExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateColumnStatisticsForPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateColumnStatisticsForPartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateColumnStatisticsForPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateColumnStatisticsForPartitionCommand = de_UpdateColumnStatisticsForPartitionCommand;
const de_UpdateColumnStatisticsForPartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateColumnStatisticsForTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateColumnStatisticsForTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateColumnStatisticsForTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateColumnStatisticsForTableCommand = de_UpdateColumnStatisticsForTableCommand;
const de_UpdateColumnStatisticsForTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateConnectionCommand = de_UpdateConnectionCommand;
const de_UpdateConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateCrawlerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateCrawlerCommand = de_UpdateCrawlerCommand;
const de_UpdateCrawlerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CrawlerRunningException":
        case "com.amazonaws.glue#CrawlerRunningException":
            throw await de_CrawlerRunningExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "VersionMismatchException":
        case "com.amazonaws.glue#VersionMismatchException":
            throw await de_VersionMismatchExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateCrawlerScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateCrawlerScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateCrawlerScheduleCommand = de_UpdateCrawlerScheduleCommand;
const de_UpdateCrawlerScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "SchedulerTransitioningException":
        case "com.amazonaws.glue#SchedulerTransitioningException":
            throw await de_SchedulerTransitioningExceptionRes(parsedOutput, context);
        case "VersionMismatchException":
        case "com.amazonaws.glue#VersionMismatchException":
            throw await de_VersionMismatchExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateDatabaseCommand = de_UpdateDatabaseCommand;
const de_UpdateDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDataQualityRulesetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateDataQualityRulesetCommand = de_UpdateDataQualityRulesetCommand;
const de_UpdateDataQualityRulesetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDevEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateDevEndpointCommand = de_UpdateDevEndpointCommand;
const de_UpdateDevEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateJobCommand = de_UpdateJobCommand;
const de_UpdateJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateJobFromSourceControlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateJobFromSourceControlCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateJobFromSourceControlCommand = de_UpdateJobFromSourceControlCommand;
const de_UpdateJobFromSourceControlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateMLTransformCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateMLTransformCommand = de_UpdateMLTransformCommand;
const de_UpdateMLTransformCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdatePartitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdatePartitionCommand = de_UpdatePartitionCommand;
const de_UpdatePartitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateRegistryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateRegistryCommand = de_UpdateRegistryCommand;
const de_UpdateRegistryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateSchemaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateSchemaCommand = de_UpdateSchemaCommand;
const de_UpdateSchemaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateSourceControlFromJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateSourceControlFromJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateSourceControlFromJobCommand = de_UpdateSourceControlFromJobCommand;
const de_UpdateSourceControlFromJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateTableCommand = de_UpdateTableCommand;
const de_UpdateTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.glue#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTableOptimizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateTableOptimizerCommand = de_UpdateTableOptimizerCommand;
const de_UpdateTableOptimizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTriggerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateTriggerCommand = de_UpdateTriggerCommand;
const de_UpdateTriggerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateUserDefinedFunctionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateUserDefinedFunctionCommand = de_UpdateUserDefinedFunctionCommand;
const de_UpdateUserDefinedFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateWorkflowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateWorkflowCommand = de_UpdateWorkflowCommand;
const de_UpdateWorkflowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ColumnStatisticsTaskNotRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.ColumnStatisticsTaskNotRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ColumnStatisticsTaskRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.ColumnStatisticsTaskRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ColumnStatisticsTaskStoppingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.ColumnStatisticsTaskStoppingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConcurrentRunsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.ConcurrentRunsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConditionCheckFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ConditionCheckFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CrawlerNotRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.CrawlerNotRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CrawlerRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.CrawlerRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CrawlerStoppingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.CrawlerStoppingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_EntityNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.EntityNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_FederatedResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.FederatedResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_FederationSourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.FederationSourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_FederationSourceRetryableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.FederationSourceRetryableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_GlueEncryptionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.GlueEncryptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IllegalBlueprintStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.IllegalBlueprintStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IllegalSessionStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.IllegalSessionStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IllegalWorkflowStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.IllegalWorkflowStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MLTransformNotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.MLTransformNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoScheduleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.NoScheduleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OperationTimeoutExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OperationTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PermissionTypeMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.PermissionTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNumberLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNumberLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SchedulerNotRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.SchedulerNotRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SchedulerRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.SchedulerRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_SchedulerTransitioningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.SchedulerTransitioningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_VersionMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_2_1.VersionMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_ApplyMapping = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Inputs: smithy_client_1._json,
        Mapping: (_) => se_Mappings(_, context),
        Name: [],
    });
};
const se_BatchCreatePartitionRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        PartitionInputList: (_) => se_PartitionInputList(_, context),
        TableName: [],
    });
};
const se_BatchUpdatePartitionRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        Entries: (_) => se_BatchUpdatePartitionRequestEntryList(_, context),
        TableName: [],
    });
};
const se_BatchUpdatePartitionRequestEntry = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        PartitionInput: (_) => se_PartitionInput(_, context),
        PartitionValueList: smithy_client_1._json,
    });
};
const se_BatchUpdatePartitionRequestEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_BatchUpdatePartitionRequestEntry(entry, context);
    });
};
const se_BinaryColumnStatisticsData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AverageLength: smithy_client_1.serializeFloat,
        MaximumLength: [],
        NumberOfNulls: [],
    });
};
const se_CatalogKafkaSource = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataPreviewOptions: smithy_client_1._json,
        Database: [],
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KafkaStreamingSourceOptions(_, context),
        Table: [],
        WindowSize: [],
    });
};
const se_CatalogKinesisSource = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataPreviewOptions: smithy_client_1._json,
        Database: [],
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KinesisStreamingSourceOptions(_, context),
        Table: [],
        WindowSize: [],
    });
};
const se_CodeGenConfigurationNode = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Aggregate: smithy_client_1._json,
        AmazonRedshiftSource: smithy_client_1._json,
        AmazonRedshiftTarget: smithy_client_1._json,
        ApplyMapping: (_) => se_ApplyMapping(_, context),
        AthenaConnectorSource: smithy_client_1._json,
        CatalogDeltaSource: smithy_client_1._json,
        CatalogHudiSource: smithy_client_1._json,
        CatalogKafkaSource: (_) => se_CatalogKafkaSource(_, context),
        CatalogKinesisSource: (_) => se_CatalogKinesisSource(_, context),
        CatalogSource: smithy_client_1._json,
        CatalogTarget: smithy_client_1._json,
        ConnectorDataSource: smithy_client_1._json,
        ConnectorDataTarget: smithy_client_1._json,
        CustomCode: smithy_client_1._json,
        DirectJDBCSource: smithy_client_1._json,
        DirectKafkaSource: (_) => se_DirectKafkaSource(_, context),
        DirectKinesisSource: (_) => se_DirectKinesisSource(_, context),
        DropDuplicates: smithy_client_1._json,
        DropFields: smithy_client_1._json,
        DropNullFields: smithy_client_1._json,
        DynamicTransform: smithy_client_1._json,
        DynamoDBCatalogSource: smithy_client_1._json,
        EvaluateDataQuality: smithy_client_1._json,
        EvaluateDataQualityMultiFrame: smithy_client_1._json,
        FillMissingValues: smithy_client_1._json,
        Filter: smithy_client_1._json,
        GovernedCatalogSource: smithy_client_1._json,
        GovernedCatalogTarget: smithy_client_1._json,
        JDBCConnectorSource: smithy_client_1._json,
        JDBCConnectorTarget: smithy_client_1._json,
        Join: smithy_client_1._json,
        Merge: smithy_client_1._json,
        MicrosoftSQLServerCatalogSource: smithy_client_1._json,
        MicrosoftSQLServerCatalogTarget: smithy_client_1._json,
        MySQLCatalogSource: smithy_client_1._json,
        MySQLCatalogTarget: smithy_client_1._json,
        OracleSQLCatalogSource: smithy_client_1._json,
        OracleSQLCatalogTarget: smithy_client_1._json,
        PIIDetection: (_) => se_PIIDetection(_, context),
        PostgreSQLCatalogSource: smithy_client_1._json,
        PostgreSQLCatalogTarget: smithy_client_1._json,
        Recipe: smithy_client_1._json,
        RedshiftSource: smithy_client_1._json,
        RedshiftTarget: smithy_client_1._json,
        RelationalCatalogSource: smithy_client_1._json,
        RenameField: smithy_client_1._json,
        S3CatalogDeltaSource: smithy_client_1._json,
        S3CatalogHudiSource: smithy_client_1._json,
        S3CatalogSource: smithy_client_1._json,
        S3CatalogTarget: smithy_client_1._json,
        S3CsvSource: smithy_client_1._json,
        S3DeltaCatalogTarget: smithy_client_1._json,
        S3DeltaDirectTarget: smithy_client_1._json,
        S3DeltaSource: smithy_client_1._json,
        S3DirectTarget: smithy_client_1._json,
        S3GlueParquetTarget: smithy_client_1._json,
        S3HudiCatalogTarget: smithy_client_1._json,
        S3HudiDirectTarget: smithy_client_1._json,
        S3HudiSource: smithy_client_1._json,
        S3JsonSource: smithy_client_1._json,
        S3ParquetSource: smithy_client_1._json,
        SelectFields: smithy_client_1._json,
        SelectFromCollection: smithy_client_1._json,
        SnowflakeSource: smithy_client_1._json,
        SnowflakeTarget: smithy_client_1._json,
        SparkConnectorSource: smithy_client_1._json,
        SparkConnectorTarget: smithy_client_1._json,
        SparkSQL: smithy_client_1._json,
        Spigot: (_) => se_Spigot(_, context),
        SplitFields: smithy_client_1._json,
        Union: smithy_client_1._json,
    });
};
const se_CodeGenConfigurationNodes = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_CodeGenConfigurationNode(value, context);
        return acc;
    }, {});
};
const se_ColumnStatistics = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AnalyzedTime: (_) => Math.round(_.getTime() / 1000),
        ColumnName: [],
        ColumnType: [],
        StatisticsData: (_) => se_ColumnStatisticsData(_, context),
    });
};
const se_ColumnStatisticsData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        BinaryColumnStatisticsData: (_) => se_BinaryColumnStatisticsData(_, context),
        BooleanColumnStatisticsData: smithy_client_1._json,
        DateColumnStatisticsData: (_) => se_DateColumnStatisticsData(_, context),
        DecimalColumnStatisticsData: (_) => se_DecimalColumnStatisticsData(_, context),
        DoubleColumnStatisticsData: (_) => se_DoubleColumnStatisticsData(_, context),
        LongColumnStatisticsData: smithy_client_1._json,
        StringColumnStatisticsData: (_) => se_StringColumnStatisticsData(_, context),
        Type: [],
    });
};
const se_CrawlerTargets = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogTargets: smithy_client_1._json,
        DeltaTargets: smithy_client_1._json,
        DynamoDBTargets: (_) => se_DynamoDBTargetList(_, context),
        HudiTargets: smithy_client_1._json,
        IcebergTargets: smithy_client_1._json,
        JdbcTargets: smithy_client_1._json,
        MongoDBTargets: smithy_client_1._json,
        S3Targets: smithy_client_1._json,
    });
};
const se_CreateCrawlerRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Classifiers: smithy_client_1._json,
        Configuration: [],
        CrawlerSecurityConfiguration: [],
        DatabaseName: [],
        Description: [],
        LakeFormationConfiguration: smithy_client_1._json,
        LineageConfiguration: smithy_client_1._json,
        Name: [],
        RecrawlPolicy: smithy_client_1._json,
        Role: [],
        Schedule: [],
        SchemaChangePolicy: smithy_client_1._json,
        TablePrefix: [],
        Tags: smithy_client_1._json,
        Targets: (_) => se_CrawlerTargets(_, context),
    });
};
const se_CreateJobRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AllocatedCapacity: [],
        CodeGenConfigurationNodes: (_) => se_CodeGenConfigurationNodes(_, context),
        Command: smithy_client_1._json,
        Connections: smithy_client_1._json,
        DefaultArguments: smithy_client_1._json,
        Description: [],
        ExecutionClass: [],
        ExecutionProperty: smithy_client_1._json,
        GlueVersion: [],
        LogUri: [],
        MaxCapacity: smithy_client_1.serializeFloat,
        MaxRetries: [],
        Name: [],
        NonOverridableArguments: smithy_client_1._json,
        NotificationProperty: smithy_client_1._json,
        NumberOfWorkers: [],
        Role: [],
        SecurityConfiguration: [],
        SourceControlDetails: smithy_client_1._json,
        Tags: smithy_client_1._json,
        Timeout: [],
        WorkerType: [],
    });
};
const se_CreateMLTransformRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Description: [],
        GlueVersion: [],
        InputRecordTables: smithy_client_1._json,
        MaxCapacity: smithy_client_1.serializeFloat,
        MaxRetries: [],
        Name: [],
        NumberOfWorkers: [],
        Parameters: (_) => se_TransformParameters(_, context),
        Role: [],
        Tags: smithy_client_1._json,
        Timeout: [],
        TransformEncryption: smithy_client_1._json,
        WorkerType: [],
    });
};
const se_CreatePartitionRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        PartitionInput: (_) => se_PartitionInput(_, context),
        TableName: [],
    });
};
const se_CreateSessionRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Command: smithy_client_1._json,
        Connections: smithy_client_1._json,
        DefaultArguments: smithy_client_1._json,
        Description: [],
        GlueVersion: [],
        Id: [],
        IdleTimeout: [],
        MaxCapacity: smithy_client_1.serializeFloat,
        NumberOfWorkers: [],
        RequestOrigin: [],
        Role: [],
        SecurityConfiguration: [],
        Tags: smithy_client_1._json,
        Timeout: [],
        WorkerType: [],
    });
};
const se_CreateTableRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        OpenTableFormatInput: smithy_client_1._json,
        PartitionIndexes: smithy_client_1._json,
        TableInput: (_) => se_TableInput(_, context),
        TransactionId: [],
    });
};
const se_DataQualityResultFilterCriteria = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataSource: smithy_client_1._json,
        JobName: [],
        JobRunId: [],
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DataQualityRuleRecommendationRunFilter = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataSource: smithy_client_1._json,
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DataQualityRulesetEvaluationRunFilter = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataSource: smithy_client_1._json,
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DataQualityRulesetFilterCriteria = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        Description: [],
        LastModifiedAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedBefore: (_) => Math.round(_.getTime() / 1000),
        Name: [],
        TargetTable: smithy_client_1._json,
    });
};
const se_DateColumnStatisticsData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        MaximumValue: (_) => Math.round(_.getTime() / 1000),
        MinimumValue: (_) => Math.round(_.getTime() / 1000),
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_DecimalColumnStatisticsData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        MaximumValue: (_) => se_DecimalNumber(_, context),
        MinimumValue: (_) => se_DecimalNumber(_, context),
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_DecimalNumber = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Scale: [],
        UnscaledValue: context.base64Encoder,
    });
};
const se_DirectKafkaSource = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataPreviewOptions: smithy_client_1._json,
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KafkaStreamingSourceOptions(_, context),
        WindowSize: [],
    });
};
const se_DirectKinesisSource = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataPreviewOptions: smithy_client_1._json,
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KinesisStreamingSourceOptions(_, context),
        WindowSize: [],
    });
};
const se_DoubleColumnStatisticsData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        MaximumValue: smithy_client_1.serializeFloat,
        MinimumValue: smithy_client_1.serializeFloat,
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_DynamoDBTarget = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Path: [],
        scanAll: [],
        scanRate: smithy_client_1.serializeFloat,
    });
};
const se_DynamoDBTargetList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DynamoDBTarget(entry, context);
    });
};
const se_FindMatchesParameters = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AccuracyCostTradeoff: smithy_client_1.serializeFloat,
        EnforceProvidedLabels: [],
        PrecisionRecallTradeoff: smithy_client_1.serializeFloat,
        PrimaryKeyColumnName: [],
    });
};
const se_GetMLTaskRunsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_TaskRunFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Sort: smithy_client_1._json,
        TransformId: [],
    });
};
const se_GetMLTransformsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_TransformFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Sort: smithy_client_1._json,
    });
};
const se_GetPartitionsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        ExcludeColumnSchema: [],
        Expression: [],
        MaxResults: [],
        NextToken: [],
        QueryAsOfTime: (_) => Math.round(_.getTime() / 1000),
        Segment: smithy_client_1._json,
        TableName: [],
        TransactionId: [],
    });
};
const se_GetTableRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        Name: [],
        QueryAsOfTime: (_) => Math.round(_.getTime() / 1000),
        TransactionId: [],
    });
};
const se_GetTablesRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        Expression: [],
        MaxResults: [],
        NextToken: [],
        QueryAsOfTime: (_) => Math.round(_.getTime() / 1000),
        TransactionId: [],
    });
};
const se_GetUnfilteredPartitionMetadataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AuditContext: smithy_client_1._json,
        CatalogId: [],
        DatabaseName: [],
        PartitionValues: smithy_client_1._json,
        QuerySessionContext: (_) => se_QuerySessionContext(_, context),
        Region: [],
        SupportedPermissionTypes: smithy_client_1._json,
        TableName: [],
    });
};
const se_GetUnfilteredPartitionsMetadataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AuditContext: smithy_client_1._json,
        CatalogId: [],
        DatabaseName: [],
        Expression: [],
        MaxResults: [],
        NextToken: [],
        QuerySessionContext: (_) => se_QuerySessionContext(_, context),
        Region: [],
        Segment: smithy_client_1._json,
        SupportedPermissionTypes: smithy_client_1._json,
        TableName: [],
    });
};
const se_GetUnfilteredTableMetadataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AuditContext: smithy_client_1._json,
        CatalogId: [],
        DatabaseName: [],
        Name: [],
        Permissions: smithy_client_1._json,
        QuerySessionContext: (_) => se_QuerySessionContext(_, context),
        Region: [],
        SupportedDialect: smithy_client_1._json,
        SupportedPermissionTypes: smithy_client_1._json,
    });
};
const se_JobUpdate = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AllocatedCapacity: [],
        CodeGenConfigurationNodes: (_) => se_CodeGenConfigurationNodes(_, context),
        Command: smithy_client_1._json,
        Connections: smithy_client_1._json,
        DefaultArguments: smithy_client_1._json,
        Description: [],
        ExecutionClass: [],
        ExecutionProperty: smithy_client_1._json,
        GlueVersion: [],
        LogUri: [],
        MaxCapacity: smithy_client_1.serializeFloat,
        MaxRetries: [],
        NonOverridableArguments: smithy_client_1._json,
        NotificationProperty: smithy_client_1._json,
        NumberOfWorkers: [],
        Role: [],
        SecurityConfiguration: [],
        SourceControlDetails: smithy_client_1._json,
        Timeout: [],
        WorkerType: [],
    });
};
const se_KafkaStreamingSourceOptions = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AddRecordTimestamp: [],
        Assign: [],
        BootstrapServers: [],
        Classification: [],
        ConnectionName: [],
        Delimiter: [],
        EmitConsumerLagMetrics: [],
        EndingOffsets: [],
        IncludeHeaders: [],
        MaxOffsetsPerTrigger: [],
        MinPartitions: [],
        NumRetries: [],
        PollTimeoutMs: [],
        RetryIntervalMs: [],
        SecurityProtocol: [],
        StartingOffsets: [],
        StartingTimestamp: (_) => _.toISOString().split(".")[0] + "Z",
        SubscribePattern: [],
        TopicName: [],
    });
};
const se_KinesisStreamingSourceOptions = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AddIdleTimeBetweenReads: [],
        AddRecordTimestamp: [],
        AvoidEmptyBatches: [],
        Classification: [],
        Delimiter: [],
        DescribeShardInterval: [],
        EmitConsumerLagMetrics: [],
        EndpointUrl: [],
        IdleTimeBetweenReadsInMs: [],
        MaxFetchRecordsPerShard: [],
        MaxFetchTimeInMs: [],
        MaxRecordPerRead: [],
        MaxRetryIntervalMs: [],
        NumRetries: [],
        RetryIntervalMs: [],
        RoleArn: [],
        RoleSessionName: [],
        StartingPosition: [],
        StartingTimestamp: (_) => _.toISOString().split(".")[0] + "Z",
        StreamArn: [],
        StreamName: [],
    });
};
const se_ListDataQualityResultsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_DataQualityResultFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDataQualityRuleRecommendationRunsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_DataQualityRuleRecommendationRunFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDataQualityRulesetEvaluationRunsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_DataQualityRulesetEvaluationRunFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDataQualityRulesetsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_DataQualityRulesetFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Tags: smithy_client_1._json,
    });
};
const se_ListMLTransformsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_TransformFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Sort: smithy_client_1._json,
        Tags: smithy_client_1._json,
    });
};
const se_Mapping = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Children: (_) => se_Mappings(_, context),
        Dropped: [],
        FromPath: smithy_client_1._json,
        FromType: [],
        ToKey: [],
        ToType: [],
    });
};
const se_Mappings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Mapping(entry, context);
    });
};
const se_PartitionInput = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        LastAccessTime: (_) => Math.round(_.getTime() / 1000),
        LastAnalyzedTime: (_) => Math.round(_.getTime() / 1000),
        Parameters: smithy_client_1._json,
        StorageDescriptor: smithy_client_1._json,
        Values: smithy_client_1._json,
    });
};
const se_PartitionInputList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PartitionInput(entry, context);
    });
};
const se_PIIDetection = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        EntityTypesToDetect: smithy_client_1._json,
        Inputs: smithy_client_1._json,
        MaskValue: [],
        Name: [],
        OutputColumnName: [],
        PiiType: [],
        SampleFraction: smithy_client_1.serializeFloat,
        ThresholdFraction: smithy_client_1.serializeFloat,
    });
};
const se_QuerySessionContext = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AdditionalContext: smithy_client_1._json,
        ClusterId: [],
        QueryAuthorizationId: [],
        QueryId: [],
        QueryStartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_Spigot = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Inputs: smithy_client_1._json,
        Name: [],
        Path: [],
        Prob: smithy_client_1.serializeFloat,
        Topk: [],
    });
};
const se_StartColumnStatisticsTaskRunRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogID: [],
        ColumnNameList: smithy_client_1._json,
        DatabaseName: [],
        Role: [],
        SampleSize: smithy_client_1.serializeFloat,
        SecurityConfiguration: [],
        TableName: [],
    });
};
const se_StartJobRunRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AllocatedCapacity: [],
        Arguments: smithy_client_1._json,
        ExecutionClass: [],
        JobName: [],
        JobRunId: [],
        MaxCapacity: smithy_client_1.serializeFloat,
        NotificationProperty: smithy_client_1._json,
        NumberOfWorkers: [],
        SecurityConfiguration: [],
        Timeout: [],
        WorkerType: [],
    });
};
const se_StringColumnStatisticsData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AverageLength: smithy_client_1.serializeFloat,
        MaximumLength: [],
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_TableInput = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Description: [],
        LastAccessTime: (_) => Math.round(_.getTime() / 1000),
        LastAnalyzedTime: (_) => Math.round(_.getTime() / 1000),
        Name: [],
        Owner: [],
        Parameters: smithy_client_1._json,
        PartitionKeys: smithy_client_1._json,
        Retention: [],
        StorageDescriptor: smithy_client_1._json,
        TableType: [],
        TargetTable: smithy_client_1._json,
        ViewExpandedText: [],
        ViewOriginalText: [],
    });
};
const se_TaskRunFilterCriteria = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
        Status: [],
        TaskRunType: [],
    });
};
const se_TransformFilterCriteria = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        GlueVersion: [],
        LastModifiedAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedBefore: (_) => Math.round(_.getTime() / 1000),
        Name: [],
        Schema: smithy_client_1._json,
        Status: [],
        TransformType: [],
    });
};
const se_TransformParameters = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        FindMatchesParameters: (_) => se_FindMatchesParameters(_, context),
        TransformType: [],
    });
};
const se_UpdateColumnStatisticsForPartitionRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        ColumnStatisticsList: (_) => se_UpdateColumnStatisticsList(_, context),
        DatabaseName: [],
        PartitionValues: smithy_client_1._json,
        TableName: [],
    });
};
const se_UpdateColumnStatisticsForTableRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        ColumnStatisticsList: (_) => se_UpdateColumnStatisticsList(_, context),
        DatabaseName: [],
        TableName: [],
    });
};
const se_UpdateColumnStatisticsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ColumnStatistics(entry, context);
    });
};
const se_UpdateCrawlerRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Classifiers: smithy_client_1._json,
        Configuration: [],
        CrawlerSecurityConfiguration: [],
        DatabaseName: [],
        Description: [],
        LakeFormationConfiguration: smithy_client_1._json,
        LineageConfiguration: smithy_client_1._json,
        Name: [],
        RecrawlPolicy: smithy_client_1._json,
        Role: [],
        Schedule: [],
        SchemaChangePolicy: smithy_client_1._json,
        TablePrefix: [],
        Targets: (_) => se_CrawlerTargets(_, context),
    });
};
const se_UpdateJobRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        JobName: [],
        JobUpdate: (_) => se_JobUpdate(_, context),
    });
};
const se_UpdateMLTransformRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Description: [],
        GlueVersion: [],
        MaxCapacity: smithy_client_1.serializeFloat,
        MaxRetries: [],
        Name: [],
        NumberOfWorkers: [],
        Parameters: (_) => se_TransformParameters(_, context),
        Role: [],
        Timeout: [],
        TransformId: [],
        WorkerType: [],
    });
};
const se_UpdatePartitionRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        PartitionInput: (_) => se_PartitionInput(_, context),
        PartitionValueList: smithy_client_1._json,
        TableName: [],
    });
};
const se_UpdateTableRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CatalogId: [],
        DatabaseName: [],
        SkipArchive: [],
        TableInput: (_) => se_TableInput(_, context),
        TransactionId: [],
        VersionId: [],
    });
};
const de_ApplyMapping = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Inputs: smithy_client_1._json,
        Mapping: (_) => de_Mappings(_, context),
        Name: smithy_client_1.expectString,
    });
};
const de_BatchGetBlueprintsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Blueprints: (_) => de_Blueprints(_, context),
        MissingBlueprints: smithy_client_1._json,
    });
};
const de_BatchGetCrawlersResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Crawlers: (_) => de_CrawlerList(_, context),
        CrawlersNotFound: smithy_client_1._json,
    });
};
const de_BatchGetDataQualityResultResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Results: (_) => de_DataQualityResultsList(_, context),
        ResultsNotFound: smithy_client_1._json,
    });
};
const de_BatchGetDevEndpointsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DevEndpoints: (_) => de_DevEndpointList(_, context),
        DevEndpointsNotFound: smithy_client_1._json,
    });
};
const de_BatchGetJobsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Jobs: (_) => de_JobList(_, context),
        JobsNotFound: smithy_client_1._json,
    });
};
const de_BatchGetPartitionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Partitions: (_) => de_PartitionList(_, context),
        UnprocessedKeys: smithy_client_1._json,
    });
};
const de_BatchGetTableOptimizerResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Failures: smithy_client_1._json,
        TableOptimizers: (_) => de_BatchTableOptimizers(_, context),
    });
};
const de_BatchGetWorkflowsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MissingWorkflows: smithy_client_1._json,
        Workflows: (_) => de_Workflows(_, context),
    });
};
const de_BatchTableOptimizer = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        catalogId: smithy_client_1.expectString,
        databaseName: smithy_client_1.expectString,
        tableName: smithy_client_1.expectString,
        tableOptimizer: (_) => de_TableOptimizer(_, context),
    });
};
const de_BatchTableOptimizers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchTableOptimizer(entry, context);
    });
    return retVal;
};
const de_BinaryColumnStatisticsData = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AverageLength: smithy_client_1.limitedParseDouble,
        MaximumLength: smithy_client_1.expectLong,
        NumberOfNulls: smithy_client_1.expectLong,
    });
};
const de_Blueprint = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BlueprintLocation: smithy_client_1.expectString,
        BlueprintServiceLocation: smithy_client_1.expectString,
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        ErrorMessage: smithy_client_1.expectString,
        LastActiveDefinition: (_) => de_LastActiveDefinition(_, context),
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        ParameterSpec: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
    });
};
const de_BlueprintRun = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BlueprintName: smithy_client_1.expectString,
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorMessage: smithy_client_1.expectString,
        Parameters: smithy_client_1.expectString,
        RoleArn: smithy_client_1.expectString,
        RollbackErrorMessage: smithy_client_1.expectString,
        RunId: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        State: smithy_client_1.expectString,
        WorkflowName: smithy_client_1.expectString,
    });
};
const de_BlueprintRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlueprintRun(entry, context);
    });
    return retVal;
};
const de_Blueprints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Blueprint(entry, context);
    });
    return retVal;
};
const de_CatalogImportStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ImportCompleted: smithy_client_1.expectBoolean,
        ImportTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ImportedBy: smithy_client_1.expectString,
    });
};
const de_CatalogKafkaSource = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataPreviewOptions: smithy_client_1._json,
        Database: smithy_client_1.expectString,
        DetectSchema: smithy_client_1.expectBoolean,
        Name: smithy_client_1.expectString,
        StreamingOptions: (_) => de_KafkaStreamingSourceOptions(_, context),
        Table: smithy_client_1.expectString,
        WindowSize: smithy_client_1.expectInt32,
    });
};
const de_CatalogKinesisSource = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataPreviewOptions: smithy_client_1._json,
        Database: smithy_client_1.expectString,
        DetectSchema: smithy_client_1.expectBoolean,
        Name: smithy_client_1.expectString,
        StreamingOptions: (_) => de_KinesisStreamingSourceOptions(_, context),
        Table: smithy_client_1.expectString,
        WindowSize: smithy_client_1.expectInt32,
    });
};
const de_Classifier = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CsvClassifier: (_) => de_CsvClassifier(_, context),
        GrokClassifier: (_) => de_GrokClassifier(_, context),
        JsonClassifier: (_) => de_JsonClassifier(_, context),
        XMLClassifier: (_) => de_XMLClassifier(_, context),
    });
};
const de_ClassifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Classifier(entry, context);
    });
    return retVal;
};
const de_CodeGenConfigurationNode = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Aggregate: smithy_client_1._json,
        AmazonRedshiftSource: smithy_client_1._json,
        AmazonRedshiftTarget: smithy_client_1._json,
        ApplyMapping: (_) => de_ApplyMapping(_, context),
        AthenaConnectorSource: smithy_client_1._json,
        CatalogDeltaSource: smithy_client_1._json,
        CatalogHudiSource: smithy_client_1._json,
        CatalogKafkaSource: (_) => de_CatalogKafkaSource(_, context),
        CatalogKinesisSource: (_) => de_CatalogKinesisSource(_, context),
        CatalogSource: smithy_client_1._json,
        CatalogTarget: smithy_client_1._json,
        ConnectorDataSource: smithy_client_1._json,
        ConnectorDataTarget: smithy_client_1._json,
        CustomCode: smithy_client_1._json,
        DirectJDBCSource: smithy_client_1._json,
        DirectKafkaSource: (_) => de_DirectKafkaSource(_, context),
        DirectKinesisSource: (_) => de_DirectKinesisSource(_, context),
        DropDuplicates: smithy_client_1._json,
        DropFields: smithy_client_1._json,
        DropNullFields: smithy_client_1._json,
        DynamicTransform: smithy_client_1._json,
        DynamoDBCatalogSource: smithy_client_1._json,
        EvaluateDataQuality: smithy_client_1._json,
        EvaluateDataQualityMultiFrame: smithy_client_1._json,
        FillMissingValues: smithy_client_1._json,
        Filter: smithy_client_1._json,
        GovernedCatalogSource: smithy_client_1._json,
        GovernedCatalogTarget: smithy_client_1._json,
        JDBCConnectorSource: smithy_client_1._json,
        JDBCConnectorTarget: smithy_client_1._json,
        Join: smithy_client_1._json,
        Merge: smithy_client_1._json,
        MicrosoftSQLServerCatalogSource: smithy_client_1._json,
        MicrosoftSQLServerCatalogTarget: smithy_client_1._json,
        MySQLCatalogSource: smithy_client_1._json,
        MySQLCatalogTarget: smithy_client_1._json,
        OracleSQLCatalogSource: smithy_client_1._json,
        OracleSQLCatalogTarget: smithy_client_1._json,
        PIIDetection: (_) => de_PIIDetection(_, context),
        PostgreSQLCatalogSource: smithy_client_1._json,
        PostgreSQLCatalogTarget: smithy_client_1._json,
        Recipe: smithy_client_1._json,
        RedshiftSource: smithy_client_1._json,
        RedshiftTarget: smithy_client_1._json,
        RelationalCatalogSource: smithy_client_1._json,
        RenameField: smithy_client_1._json,
        S3CatalogDeltaSource: smithy_client_1._json,
        S3CatalogHudiSource: smithy_client_1._json,
        S3CatalogSource: smithy_client_1._json,
        S3CatalogTarget: smithy_client_1._json,
        S3CsvSource: smithy_client_1._json,
        S3DeltaCatalogTarget: smithy_client_1._json,
        S3DeltaDirectTarget: smithy_client_1._json,
        S3DeltaSource: smithy_client_1._json,
        S3DirectTarget: smithy_client_1._json,
        S3GlueParquetTarget: smithy_client_1._json,
        S3HudiCatalogTarget: smithy_client_1._json,
        S3HudiDirectTarget: smithy_client_1._json,
        S3HudiSource: smithy_client_1._json,
        S3JsonSource: smithy_client_1._json,
        S3ParquetSource: smithy_client_1._json,
        SelectFields: smithy_client_1._json,
        SelectFromCollection: smithy_client_1._json,
        SnowflakeSource: smithy_client_1._json,
        SnowflakeTarget: smithy_client_1._json,
        SparkConnectorSource: smithy_client_1._json,
        SparkConnectorTarget: smithy_client_1._json,
        SparkSQL: smithy_client_1._json,
        Spigot: (_) => de_Spigot(_, context),
        SplitFields: smithy_client_1._json,
        Union: smithy_client_1._json,
    });
};
const de_CodeGenConfigurationNodes = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_CodeGenConfigurationNode(value, context);
        return acc;
    }, {});
};
const de_ColumnImportance = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ColumnName: smithy_client_1.expectString,
        Importance: smithy_client_1.limitedParseDouble,
    });
};
const de_ColumnImportanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnImportance(entry, context);
    });
    return retVal;
};
const de_ColumnStatistics = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AnalyzedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ColumnName: smithy_client_1.expectString,
        ColumnType: smithy_client_1.expectString,
        StatisticsData: (_) => de_ColumnStatisticsData(_, context),
    });
};
const de_ColumnStatisticsData = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BinaryColumnStatisticsData: (_) => de_BinaryColumnStatisticsData(_, context),
        BooleanColumnStatisticsData: smithy_client_1._json,
        DateColumnStatisticsData: (_) => de_DateColumnStatisticsData(_, context),
        DecimalColumnStatisticsData: (_) => de_DecimalColumnStatisticsData(_, context),
        DoubleColumnStatisticsData: (_) => de_DoubleColumnStatisticsData(_, context),
        LongColumnStatisticsData: smithy_client_1._json,
        StringColumnStatisticsData: (_) => de_StringColumnStatisticsData(_, context),
        Type: smithy_client_1.expectString,
    });
};
const de_ColumnStatisticsError = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ColumnStatistics: (_) => de_ColumnStatistics(_, context),
        Error: smithy_client_1._json,
    });
};
const de_ColumnStatisticsErrors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnStatisticsError(entry, context);
    });
    return retVal;
};
const de_ColumnStatisticsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnStatistics(entry, context);
    });
    return retVal;
};
const de_ColumnStatisticsTaskRun = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogID: smithy_client_1.expectString,
        ColumnNameList: smithy_client_1._json,
        ColumnStatisticsTaskRunId: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CustomerId: smithy_client_1.expectString,
        DPUSeconds: smithy_client_1.limitedParseDouble,
        DatabaseName: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorMessage: smithy_client_1.expectString,
        LastUpdated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NumberOfWorkers: smithy_client_1.expectInt32,
        Role: smithy_client_1.expectString,
        SampleSize: smithy_client_1.limitedParseDouble,
        SecurityConfiguration: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        WorkerType: smithy_client_1.expectString,
    });
};
const de_ColumnStatisticsTaskRunsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnStatisticsTaskRun(entry, context);
    });
    return retVal;
};
const de_Connection = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConnectionProperties: smithy_client_1._json,
        ConnectionType: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        LastUpdatedBy: smithy_client_1.expectString,
        LastUpdatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MatchCriteria: smithy_client_1._json,
        Name: smithy_client_1.expectString,
        PhysicalConnectionRequirements: smithy_client_1._json,
    });
};
const de_ConnectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Connection(entry, context);
    });
    return retVal;
};
const de_Crawl = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorMessage: smithy_client_1.expectString,
        LogGroup: smithy_client_1.expectString,
        LogStream: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        State: smithy_client_1.expectString,
    });
};
const de_Crawler = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Classifiers: smithy_client_1._json,
        Configuration: smithy_client_1.expectString,
        CrawlElapsedTime: smithy_client_1.expectLong,
        CrawlerSecurityConfiguration: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DatabaseName: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        LakeFormationConfiguration: smithy_client_1._json,
        LastCrawl: (_) => de_LastCrawlInfo(_, context),
        LastUpdated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LineageConfiguration: smithy_client_1._json,
        Name: smithy_client_1.expectString,
        RecrawlPolicy: smithy_client_1._json,
        Role: smithy_client_1.expectString,
        Schedule: smithy_client_1._json,
        SchemaChangePolicy: smithy_client_1._json,
        State: smithy_client_1.expectString,
        TablePrefix: smithy_client_1.expectString,
        Targets: (_) => de_CrawlerTargets(_, context),
        Version: smithy_client_1.expectLong,
    });
};
const de_CrawlerHistory = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CrawlId: smithy_client_1.expectString,
        DPUHour: smithy_client_1.limitedParseDouble,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorMessage: smithy_client_1.expectString,
        LogGroup: smithy_client_1.expectString,
        LogStream: smithy_client_1.expectString,
        MessagePrefix: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        State: smithy_client_1.expectString,
        Summary: smithy_client_1.expectString,
    });
};
const de_CrawlerHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CrawlerHistory(entry, context);
    });
    return retVal;
};
const de_CrawlerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Crawler(entry, context);
    });
    return retVal;
};
const de_CrawlerMetrics = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CrawlerName: smithy_client_1.expectString,
        LastRuntimeSeconds: smithy_client_1.limitedParseDouble,
        MedianRuntimeSeconds: smithy_client_1.limitedParseDouble,
        StillEstimating: smithy_client_1.expectBoolean,
        TablesCreated: smithy_client_1.expectInt32,
        TablesDeleted: smithy_client_1.expectInt32,
        TablesUpdated: smithy_client_1.expectInt32,
        TimeLeftSeconds: smithy_client_1.limitedParseDouble,
    });
};
const de_CrawlerMetricsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CrawlerMetrics(entry, context);
    });
    return retVal;
};
const de_CrawlerNodeDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Crawls: (_) => de_CrawlList(_, context),
    });
};
const de_CrawlerTargets = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogTargets: smithy_client_1._json,
        DeltaTargets: smithy_client_1._json,
        DynamoDBTargets: (_) => de_DynamoDBTargetList(_, context),
        HudiTargets: smithy_client_1._json,
        IcebergTargets: smithy_client_1._json,
        JdbcTargets: smithy_client_1._json,
        MongoDBTargets: smithy_client_1._json,
        S3Targets: smithy_client_1._json,
    });
};
const de_CrawlList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Crawl(entry, context);
    });
    return retVal;
};
const de_CreateDevEndpointResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arguments: smithy_client_1._json,
        AvailabilityZone: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EndpointName: smithy_client_1.expectString,
        ExtraJarsS3Path: smithy_client_1.expectString,
        ExtraPythonLibsS3Path: smithy_client_1.expectString,
        FailureReason: smithy_client_1.expectString,
        GlueVersion: smithy_client_1.expectString,
        NumberOfNodes: smithy_client_1.expectInt32,
        NumberOfWorkers: smithy_client_1.expectInt32,
        RoleArn: smithy_client_1.expectString,
        SecurityConfiguration: smithy_client_1.expectString,
        SecurityGroupIds: smithy_client_1._json,
        Status: smithy_client_1.expectString,
        SubnetId: smithy_client_1.expectString,
        VpcId: smithy_client_1.expectString,
        WorkerType: smithy_client_1.expectString,
        YarnEndpointAddress: smithy_client_1.expectString,
        ZeppelinRemoteSparkInterpreterPort: smithy_client_1.expectInt32,
    });
};
const de_CreateSecurityConfigurationResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
    });
};
const de_CreateSessionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Session: (_) => de_Session(_, context),
    });
};
const de_CsvClassifier = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AllowSingleColumn: smithy_client_1.expectBoolean,
        ContainsHeader: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CustomDatatypeConfigured: smithy_client_1.expectBoolean,
        CustomDatatypes: smithy_client_1._json,
        Delimiter: smithy_client_1.expectString,
        DisableValueTrimming: smithy_client_1.expectBoolean,
        Header: smithy_client_1._json,
        LastUpdated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        QuoteSymbol: smithy_client_1.expectString,
        Serde: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong,
    });
};
const de_Database = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogId: smithy_client_1.expectString,
        CreateTableDefaultPermissions: smithy_client_1._json,
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        FederatedDatabase: smithy_client_1._json,
        LocationUri: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Parameters: smithy_client_1._json,
        TargetDatabase: smithy_client_1._json,
    });
};
const de_DatabaseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Database(entry, context);
    });
    return retVal;
};
const de_DataQualityAnalyzerResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Description: smithy_client_1.expectString,
        EvaluatedMetrics: (_) => de_EvaluatedMetricsMap(_, context),
        EvaluationMessage: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
    });
};
const de_DataQualityAnalyzerResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityAnalyzerResult(entry, context);
    });
    return retVal;
};
const de_DataQualityMetricValues = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ActualValue: smithy_client_1.limitedParseDouble,
        ExpectedValue: smithy_client_1.limitedParseDouble,
        LowerLimit: smithy_client_1.limitedParseDouble,
        UpperLimit: smithy_client_1.limitedParseDouble,
    });
};
const de_DataQualityObservation = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Description: smithy_client_1.expectString,
        MetricBasedObservation: (_) => de_MetricBasedObservation(_, context),
    });
};
const de_DataQualityObservations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityObservation(entry, context);
    });
    return retVal;
};
const de_DataQualityResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AnalyzerResults: (_) => de_DataQualityAnalyzerResults(_, context),
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DataSource: smithy_client_1._json,
        EvaluationContext: smithy_client_1.expectString,
        JobName: smithy_client_1.expectString,
        JobRunId: smithy_client_1.expectString,
        Observations: (_) => de_DataQualityObservations(_, context),
        ResultId: smithy_client_1.expectString,
        RuleResults: (_) => de_DataQualityRuleResults(_, context),
        RulesetEvaluationRunId: smithy_client_1.expectString,
        RulesetName: smithy_client_1.expectString,
        Score: smithy_client_1.limitedParseDouble,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_DataQualityResultDescription = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataSource: smithy_client_1._json,
        JobName: smithy_client_1.expectString,
        JobRunId: smithy_client_1.expectString,
        ResultId: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_DataQualityResultDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityResultDescription(entry, context);
    });
    return retVal;
};
const de_DataQualityResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityResult(entry, context);
    });
    return retVal;
};
const de_DataQualityRuleRecommendationRunDescription = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataSource: smithy_client_1._json,
        RunId: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
    });
};
const de_DataQualityRuleRecommendationRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRuleRecommendationRunDescription(entry, context);
    });
    return retVal;
};
const de_DataQualityRuleResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Description: smithy_client_1.expectString,
        EvaluatedMetrics: (_) => de_EvaluatedMetricsMap(_, context),
        EvaluationMessage: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Result: smithy_client_1.expectString,
    });
};
const de_DataQualityRuleResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRuleResult(entry, context);
    });
    return retVal;
};
const de_DataQualityRulesetEvaluationRunDescription = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataSource: smithy_client_1._json,
        RunId: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
    });
};
const de_DataQualityRulesetEvaluationRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRulesetEvaluationRunDescription(entry, context);
    });
    return retVal;
};
const de_DataQualityRulesetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRulesetListDetails(entry, context);
    });
    return retVal;
};
const de_DataQualityRulesetListDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        RecommendationRunId: smithy_client_1.expectString,
        RuleCount: smithy_client_1.expectInt32,
        TargetTable: smithy_client_1._json,
    });
};
const de_DateColumnStatisticsData = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MaximumValue: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MinimumValue: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NumberOfDistinctValues: smithy_client_1.expectLong,
        NumberOfNulls: smithy_client_1.expectLong,
    });
};
const de_DecimalColumnStatisticsData = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MaximumValue: (_) => de_DecimalNumber(_, context),
        MinimumValue: (_) => de_DecimalNumber(_, context),
        NumberOfDistinctValues: smithy_client_1.expectLong,
        NumberOfNulls: smithy_client_1.expectLong,
    });
};
const de_DecimalNumber = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Scale: smithy_client_1.expectInt32,
        UnscaledValue: context.base64Decoder,
    });
};
const de_DevEndpoint = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arguments: smithy_client_1._json,
        AvailabilityZone: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EndpointName: smithy_client_1.expectString,
        ExtraJarsS3Path: smithy_client_1.expectString,
        ExtraPythonLibsS3Path: smithy_client_1.expectString,
        FailureReason: smithy_client_1.expectString,
        GlueVersion: smithy_client_1.expectString,
        LastModifiedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdateStatus: smithy_client_1.expectString,
        NumberOfNodes: smithy_client_1.expectInt32,
        NumberOfWorkers: smithy_client_1.expectInt32,
        PrivateAddress: smithy_client_1.expectString,
        PublicAddress: smithy_client_1.expectString,
        PublicKey: smithy_client_1.expectString,
        PublicKeys: smithy_client_1._json,
        RoleArn: smithy_client_1.expectString,
        SecurityConfiguration: smithy_client_1.expectString,
        SecurityGroupIds: smithy_client_1._json,
        Status: smithy_client_1.expectString,
        SubnetId: smithy_client_1.expectString,
        VpcId: smithy_client_1.expectString,
        WorkerType: smithy_client_1.expectString,
        YarnEndpointAddress: smithy_client_1.expectString,
        ZeppelinRemoteSparkInterpreterPort: smithy_client_1.expectInt32,
    });
};
const de_DevEndpointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DevEndpoint(entry, context);
    });
    return retVal;
};
const de_DirectKafkaSource = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataPreviewOptions: smithy_client_1._json,
        DetectSchema: smithy_client_1.expectBoolean,
        Name: smithy_client_1.expectString,
        StreamingOptions: (_) => de_KafkaStreamingSourceOptions(_, context),
        WindowSize: smithy_client_1.expectInt32,
    });
};
const de_DirectKinesisSource = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataPreviewOptions: smithy_client_1._json,
        DetectSchema: smithy_client_1.expectBoolean,
        Name: smithy_client_1.expectString,
        StreamingOptions: (_) => de_KinesisStreamingSourceOptions(_, context),
        WindowSize: smithy_client_1.expectInt32,
    });
};
const de_DoubleColumnStatisticsData = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MaximumValue: smithy_client_1.limitedParseDouble,
        MinimumValue: smithy_client_1.limitedParseDouble,
        NumberOfDistinctValues: smithy_client_1.expectLong,
        NumberOfNulls: smithy_client_1.expectLong,
    });
};
const de_DynamoDBTarget = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Path: smithy_client_1.expectString,
        scanAll: smithy_client_1.expectBoolean,
        scanRate: smithy_client_1.limitedParseDouble,
    });
};
const de_DynamoDBTargetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DynamoDBTarget(entry, context);
    });
    return retVal;
};
const de_EvaluatedMetricsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.limitedParseDouble)(value);
        return acc;
    }, {});
};
const de_EvaluationMetrics = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FindMatchesMetrics: (_) => de_FindMatchesMetrics(_, context),
        TransformType: smithy_client_1.expectString,
    });
};
const de_FindMatchesMetrics = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AreaUnderPRCurve: smithy_client_1.limitedParseDouble,
        ColumnImportances: (_) => de_ColumnImportanceList(_, context),
        ConfusionMatrix: smithy_client_1._json,
        F1: smithy_client_1.limitedParseDouble,
        Precision: smithy_client_1.limitedParseDouble,
        Recall: smithy_client_1.limitedParseDouble,
    });
};
const de_FindMatchesParameters = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccuracyCostTradeoff: smithy_client_1.limitedParseDouble,
        EnforceProvidedLabels: smithy_client_1.expectBoolean,
        PrecisionRecallTradeoff: smithy_client_1.limitedParseDouble,
        PrimaryKeyColumnName: smithy_client_1.expectString,
    });
};
const de_GetBlueprintResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Blueprint: (_) => de_Blueprint(_, context),
    });
};
const de_GetBlueprintRunResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BlueprintRun: (_) => de_BlueprintRun(_, context),
    });
};
const de_GetBlueprintRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BlueprintRuns: (_) => de_BlueprintRuns(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetCatalogImportStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ImportStatus: (_) => de_CatalogImportStatus(_, context),
    });
};
const de_GetClassifierResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Classifier: (_) => de_Classifier(_, context),
    });
};
const de_GetClassifiersResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Classifiers: (_) => de_ClassifierList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetColumnStatisticsForPartitionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ColumnStatisticsList: (_) => de_ColumnStatisticsList(_, context),
        Errors: smithy_client_1._json,
    });
};
const de_GetColumnStatisticsForTableResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ColumnStatisticsList: (_) => de_ColumnStatisticsList(_, context),
        Errors: smithy_client_1._json,
    });
};
const de_GetColumnStatisticsTaskRunResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ColumnStatisticsTaskRun: (_) => de_ColumnStatisticsTaskRun(_, context),
    });
};
const de_GetColumnStatisticsTaskRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ColumnStatisticsTaskRuns: (_) => de_ColumnStatisticsTaskRunsList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetConnectionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Connection: (_) => de_Connection(_, context),
    });
};
const de_GetConnectionsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConnectionList: (_) => de_ConnectionList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetCrawlerMetricsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CrawlerMetricsList: (_) => de_CrawlerMetricsList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetCrawlerResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Crawler: (_) => de_Crawler(_, context),
    });
};
const de_GetCrawlersResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Crawlers: (_) => de_CrawlerList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetDatabaseResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Database: (_) => de_Database(_, context),
    });
};
const de_GetDatabasesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DatabaseList: (_) => de_DatabaseList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetDataQualityResultResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AnalyzerResults: (_) => de_DataQualityAnalyzerResults(_, context),
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DataSource: smithy_client_1._json,
        EvaluationContext: smithy_client_1.expectString,
        JobName: smithy_client_1.expectString,
        JobRunId: smithy_client_1.expectString,
        Observations: (_) => de_DataQualityObservations(_, context),
        ResultId: smithy_client_1.expectString,
        RuleResults: (_) => de_DataQualityRuleResults(_, context),
        RulesetEvaluationRunId: smithy_client_1.expectString,
        RulesetName: smithy_client_1.expectString,
        Score: smithy_client_1.limitedParseDouble,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_GetDataQualityRuleRecommendationRunResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CreatedRulesetName: smithy_client_1.expectString,
        DataSource: smithy_client_1._json,
        ErrorString: smithy_client_1.expectString,
        ExecutionTime: smithy_client_1.expectInt32,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NumberOfWorkers: smithy_client_1.expectInt32,
        RecommendedRuleset: smithy_client_1.expectString,
        Role: smithy_client_1.expectString,
        RunId: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        Timeout: smithy_client_1.expectInt32,
    });
};
const de_GetDataQualityRulesetEvaluationRunResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AdditionalDataSources: smithy_client_1._json,
        AdditionalRunOptions: smithy_client_1._json,
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DataSource: smithy_client_1._json,
        ErrorString: smithy_client_1.expectString,
        ExecutionTime: smithy_client_1.expectInt32,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NumberOfWorkers: smithy_client_1.expectInt32,
        ResultIds: smithy_client_1._json,
        Role: smithy_client_1.expectString,
        RulesetNames: smithy_client_1._json,
        RunId: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        Timeout: smithy_client_1.expectInt32,
    });
};
const de_GetDataQualityRulesetResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        RecommendationRunId: smithy_client_1.expectString,
        Ruleset: smithy_client_1.expectString,
        TargetTable: smithy_client_1._json,
    });
};
const de_GetDevEndpointResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DevEndpoint: (_) => de_DevEndpoint(_, context),
    });
};
const de_GetDevEndpointsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DevEndpoints: (_) => de_DevEndpointList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Job: (_) => de_Job(_, context),
    });
};
const de_GetJobRunResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        JobRun: (_) => de_JobRun(_, context),
    });
};
const de_GetJobRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        JobRuns: (_) => de_JobRunList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetJobsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Jobs: (_) => de_JobList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetMLTaskRunResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorString: smithy_client_1.expectString,
        ExecutionTime: smithy_client_1.expectInt32,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LogGroupName: smithy_client_1.expectString,
        Properties: smithy_client_1._json,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        TaskRunId: smithy_client_1.expectString,
        TransformId: smithy_client_1.expectString,
    });
};
const de_GetMLTaskRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        TaskRuns: (_) => de_TaskRunList(_, context),
    });
};
const de_GetMLTransformResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        EvaluationMetrics: (_) => de_EvaluationMetrics(_, context),
        GlueVersion: smithy_client_1.expectString,
        InputRecordTables: smithy_client_1._json,
        LabelCount: smithy_client_1.expectInt32,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxCapacity: smithy_client_1.limitedParseDouble,
        MaxRetries: smithy_client_1.expectInt32,
        Name: smithy_client_1.expectString,
        NumberOfWorkers: smithy_client_1.expectInt32,
        Parameters: (_) => de_TransformParameters(_, context),
        Role: smithy_client_1.expectString,
        Schema: smithy_client_1._json,
        Status: smithy_client_1.expectString,
        Timeout: smithy_client_1.expectInt32,
        TransformEncryption: smithy_client_1._json,
        TransformId: smithy_client_1.expectString,
        WorkerType: smithy_client_1.expectString,
    });
};
const de_GetMLTransformsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Transforms: (_) => de_TransformList(_, context),
    });
};
const de_GetPartitionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Partition: (_) => de_Partition(_, context),
    });
};
const de_GetPartitionsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Partitions: (_) => de_PartitionList(_, context),
    });
};
const de_GetResourcePoliciesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        GetResourcePoliciesResponseList: (_) => de_GetResourcePoliciesResponseList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetResourcePoliciesResponseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GluePolicy(entry, context);
    });
    return retVal;
};
const de_GetResourcePolicyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PolicyHash: smithy_client_1.expectString,
        PolicyInJson: smithy_client_1.expectString,
        UpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_GetSecurityConfigurationResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        SecurityConfiguration: (_) => de_SecurityConfiguration(_, context),
    });
};
const de_GetSecurityConfigurationsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        SecurityConfigurations: (_) => de_SecurityConfigurationList(_, context),
    });
};
const de_GetSessionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Session: (_) => de_Session(_, context),
    });
};
const de_GetStatementResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Statement: (_) => de_Statement(_, context),
    });
};
const de_GetTableOptimizerResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogId: smithy_client_1.expectString,
        DatabaseName: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableOptimizer: (_) => de_TableOptimizer(_, context),
    });
};
const de_GetTableResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Table: (_) => de_Table(_, context),
    });
};
const de_GetTablesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        TableList: (_) => de_TableList(_, context),
    });
};
const de_GetTableVersionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        TableVersion: (_) => de_TableVersion(_, context),
    });
};
const de_GetTableVersionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TableVersion(entry, context);
    });
    return retVal;
};
const de_GetTableVersionsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        TableVersions: (_) => de_GetTableVersionsList(_, context),
    });
};
const de_GetUnfilteredPartitionMetadataResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AuthorizedColumns: smithy_client_1._json,
        IsRegisteredWithLakeFormation: smithy_client_1.expectBoolean,
        Partition: (_) => de_Partition(_, context),
    });
};
const de_GetUnfilteredPartitionsMetadataResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        UnfilteredPartitions: (_) => de_UnfilteredPartitionList(_, context),
    });
};
const de_GetUnfilteredTableMetadataResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AuthorizedColumns: smithy_client_1._json,
        CellFilters: smithy_client_1._json,
        IsRegisteredWithLakeFormation: smithy_client_1.expectBoolean,
        Permissions: smithy_client_1._json,
        QueryAuthorizationId: smithy_client_1.expectString,
        ResourceArn: smithy_client_1.expectString,
        Table: (_) => de_Table(_, context),
    });
};
const de_GetUserDefinedFunctionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        UserDefinedFunction: (_) => de_UserDefinedFunction(_, context),
    });
};
const de_GetUserDefinedFunctionsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        UserDefinedFunctions: (_) => de_UserDefinedFunctionList(_, context),
    });
};
const de_GetWorkflowResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Workflow: (_) => de_Workflow(_, context),
    });
};
const de_GetWorkflowRunResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Run: (_) => de_WorkflowRun(_, context),
    });
};
const de_GetWorkflowRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Runs: (_) => de_WorkflowRuns(_, context),
    });
};
const de_GluePolicy = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PolicyHash: smithy_client_1.expectString,
        PolicyInJson: smithy_client_1.expectString,
        UpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_GrokClassifier = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Classification: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CustomPatterns: smithy_client_1.expectString,
        GrokPattern: smithy_client_1.expectString,
        LastUpdated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong,
    });
};
const de_Job = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AllocatedCapacity: smithy_client_1.expectInt32,
        CodeGenConfigurationNodes: (_) => de_CodeGenConfigurationNodes(_, context),
        Command: smithy_client_1._json,
        Connections: smithy_client_1._json,
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DefaultArguments: smithy_client_1._json,
        Description: smithy_client_1.expectString,
        ExecutionClass: smithy_client_1.expectString,
        ExecutionProperty: smithy_client_1._json,
        GlueVersion: smithy_client_1.expectString,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LogUri: smithy_client_1.expectString,
        MaxCapacity: smithy_client_1.limitedParseDouble,
        MaxRetries: smithy_client_1.expectInt32,
        Name: smithy_client_1.expectString,
        NonOverridableArguments: smithy_client_1._json,
        NotificationProperty: smithy_client_1._json,
        NumberOfWorkers: smithy_client_1.expectInt32,
        Role: smithy_client_1.expectString,
        SecurityConfiguration: smithy_client_1.expectString,
        SourceControlDetails: smithy_client_1._json,
        Timeout: smithy_client_1.expectInt32,
        WorkerType: smithy_client_1.expectString,
    });
};
const de_JobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Job(entry, context);
    });
    return retVal;
};
const de_JobNodeDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        JobRuns: (_) => de_JobRunList(_, context),
    });
};
const de_JobRun = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AllocatedCapacity: smithy_client_1.expectInt32,
        Arguments: smithy_client_1._json,
        Attempt: smithy_client_1.expectInt32,
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DPUSeconds: smithy_client_1.limitedParseDouble,
        ErrorMessage: smithy_client_1.expectString,
        ExecutionClass: smithy_client_1.expectString,
        ExecutionTime: smithy_client_1.expectInt32,
        GlueVersion: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        JobName: smithy_client_1.expectString,
        JobRunState: smithy_client_1.expectString,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LogGroupName: smithy_client_1.expectString,
        MaxCapacity: smithy_client_1.limitedParseDouble,
        NotificationProperty: smithy_client_1._json,
        NumberOfWorkers: smithy_client_1.expectInt32,
        PredecessorRuns: smithy_client_1._json,
        PreviousRunId: smithy_client_1.expectString,
        SecurityConfiguration: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Timeout: smithy_client_1.expectInt32,
        TriggerName: smithy_client_1.expectString,
        WorkerType: smithy_client_1.expectString,
    });
};
const de_JobRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobRun(entry, context);
    });
    return retVal;
};
const de_JsonClassifier = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        JsonPath: smithy_client_1.expectString,
        LastUpdated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong,
    });
};
const de_KafkaStreamingSourceOptions = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AddRecordTimestamp: smithy_client_1.expectString,
        Assign: smithy_client_1.expectString,
        BootstrapServers: smithy_client_1.expectString,
        Classification: smithy_client_1.expectString,
        ConnectionName: smithy_client_1.expectString,
        Delimiter: smithy_client_1.expectString,
        EmitConsumerLagMetrics: smithy_client_1.expectString,
        EndingOffsets: smithy_client_1.expectString,
        IncludeHeaders: smithy_client_1.expectBoolean,
        MaxOffsetsPerTrigger: smithy_client_1.expectLong,
        MinPartitions: smithy_client_1.expectInt32,
        NumRetries: smithy_client_1.expectInt32,
        PollTimeoutMs: smithy_client_1.expectLong,
        RetryIntervalMs: smithy_client_1.expectLong,
        SecurityProtocol: smithy_client_1.expectString,
        StartingOffsets: smithy_client_1.expectString,
        StartingTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        SubscribePattern: smithy_client_1.expectString,
        TopicName: smithy_client_1.expectString,
    });
};
const de_KinesisStreamingSourceOptions = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AddIdleTimeBetweenReads: smithy_client_1.expectBoolean,
        AddRecordTimestamp: smithy_client_1.expectString,
        AvoidEmptyBatches: smithy_client_1.expectBoolean,
        Classification: smithy_client_1.expectString,
        Delimiter: smithy_client_1.expectString,
        DescribeShardInterval: smithy_client_1.expectLong,
        EmitConsumerLagMetrics: smithy_client_1.expectString,
        EndpointUrl: smithy_client_1.expectString,
        IdleTimeBetweenReadsInMs: smithy_client_1.expectLong,
        MaxFetchRecordsPerShard: smithy_client_1.expectLong,
        MaxFetchTimeInMs: smithy_client_1.expectLong,
        MaxRecordPerRead: smithy_client_1.expectLong,
        MaxRetryIntervalMs: smithy_client_1.expectLong,
        NumRetries: smithy_client_1.expectInt32,
        RetryIntervalMs: smithy_client_1.expectLong,
        RoleArn: smithy_client_1.expectString,
        RoleSessionName: smithy_client_1.expectString,
        StartingPosition: smithy_client_1.expectString,
        StartingTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        StreamArn: smithy_client_1.expectString,
        StreamName: smithy_client_1.expectString,
    });
};
const de_LastActiveDefinition = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BlueprintLocation: smithy_client_1.expectString,
        BlueprintServiceLocation: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ParameterSpec: smithy_client_1.expectString,
    });
};
const de_LastCrawlInfo = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ErrorMessage: smithy_client_1.expectString,
        LogGroup: smithy_client_1.expectString,
        LogStream: smithy_client_1.expectString,
        MessagePrefix: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
    });
};
const de_ListCrawlsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Crawls: (_) => de_CrawlerHistoryList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListDataQualityResultsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Results: (_) => de_DataQualityResultDescriptionList(_, context),
    });
};
const de_ListDataQualityRuleRecommendationRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Runs: (_) => de_DataQualityRuleRecommendationRunList(_, context),
    });
};
const de_ListDataQualityRulesetEvaluationRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Runs: (_) => de_DataQualityRulesetEvaluationRunList(_, context),
    });
};
const de_ListDataQualityRulesetsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Rulesets: (_) => de_DataQualityRulesetList(_, context),
    });
};
const de_ListSessionsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Ids: smithy_client_1._json,
        NextToken: smithy_client_1.expectString,
        Sessions: (_) => de_SessionList(_, context),
    });
};
const de_ListStatementsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Statements: (_) => de_StatementList(_, context),
    });
};
const de_ListTableOptimizerRunsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogId: smithy_client_1.expectString,
        DatabaseName: smithy_client_1.expectString,
        NextToken: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableOptimizerRuns: (_) => de_TableOptimizerRuns(_, context),
    });
};
const de_Mapping = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Children: (_) => de_Mappings(_, context),
        Dropped: smithy_client_1.expectBoolean,
        FromPath: smithy_client_1._json,
        FromType: smithy_client_1.expectString,
        ToKey: smithy_client_1.expectString,
        ToType: smithy_client_1.expectString,
    });
};
const de_Mappings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Mapping(entry, context);
    });
    return retVal;
};
const de_MetricBasedObservation = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        MetricName: smithy_client_1.expectString,
        MetricValues: (_) => de_DataQualityMetricValues(_, context),
        NewRules: smithy_client_1._json,
    });
};
const de_MLTransform = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        EvaluationMetrics: (_) => de_EvaluationMetrics(_, context),
        GlueVersion: smithy_client_1.expectString,
        InputRecordTables: smithy_client_1._json,
        LabelCount: smithy_client_1.expectInt32,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxCapacity: smithy_client_1.limitedParseDouble,
        MaxRetries: smithy_client_1.expectInt32,
        Name: smithy_client_1.expectString,
        NumberOfWorkers: smithy_client_1.expectInt32,
        Parameters: (_) => de_TransformParameters(_, context),
        Role: smithy_client_1.expectString,
        Schema: smithy_client_1._json,
        Status: smithy_client_1.expectString,
        Timeout: smithy_client_1.expectInt32,
        TransformEncryption: smithy_client_1._json,
        TransformId: smithy_client_1.expectString,
        WorkerType: smithy_client_1.expectString,
    });
};
const de_Node = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CrawlerDetails: (_) => de_CrawlerNodeDetails(_, context),
        JobDetails: (_) => de_JobNodeDetails(_, context),
        Name: smithy_client_1.expectString,
        TriggerDetails: smithy_client_1._json,
        Type: smithy_client_1.expectString,
        UniqueId: smithy_client_1.expectString,
    });
};
const de_NodeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Node(entry, context);
    });
    return retVal;
};
const de_Partition = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogId: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DatabaseName: smithy_client_1.expectString,
        LastAccessTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastAnalyzedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Parameters: smithy_client_1._json,
        StorageDescriptor: smithy_client_1._json,
        TableName: smithy_client_1.expectString,
        Values: smithy_client_1._json,
    });
};
const de_PartitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Partition(entry, context);
    });
    return retVal;
};
const de_PIIDetection = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EntityTypesToDetect: smithy_client_1._json,
        Inputs: smithy_client_1._json,
        MaskValue: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        OutputColumnName: smithy_client_1.expectString,
        PiiType: smithy_client_1.expectString,
        SampleFraction: smithy_client_1.limitedParseDouble,
        ThresholdFraction: smithy_client_1.limitedParseDouble,
    });
};
const de_SearchTablesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        TableList: (_) => de_TableList(_, context),
    });
};
const de_SecurityConfiguration = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreatedTimeStamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EncryptionConfiguration: smithy_client_1._json,
        Name: smithy_client_1.expectString,
    });
};
const de_SecurityConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityConfiguration(entry, context);
    });
    return retVal;
};
const de_Session = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Command: smithy_client_1._json,
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Connections: smithy_client_1._json,
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DPUSeconds: smithy_client_1.limitedParseDouble,
        DefaultArguments: smithy_client_1._json,
        Description: smithy_client_1.expectString,
        ErrorMessage: smithy_client_1.expectString,
        ExecutionTime: smithy_client_1.limitedParseDouble,
        GlueVersion: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        IdleTimeout: smithy_client_1.expectInt32,
        MaxCapacity: smithy_client_1.limitedParseDouble,
        NumberOfWorkers: smithy_client_1.expectInt32,
        Progress: smithy_client_1.limitedParseDouble,
        Role: smithy_client_1.expectString,
        SecurityConfiguration: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        WorkerType: smithy_client_1.expectString,
    });
};
const de_SessionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Session(entry, context);
    });
    return retVal;
};
const de_Spigot = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Inputs: smithy_client_1._json,
        Name: smithy_client_1.expectString,
        Path: smithy_client_1.expectString,
        Prob: smithy_client_1.limitedParseDouble,
        Topk: smithy_client_1.expectInt32,
    });
};
const de_Statement = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Code: smithy_client_1.expectString,
        CompletedOn: smithy_client_1.expectLong,
        Id: smithy_client_1.expectInt32,
        Output: smithy_client_1._json,
        Progress: smithy_client_1.limitedParseDouble,
        StartedOn: smithy_client_1.expectLong,
        State: smithy_client_1.expectString,
    });
};
const de_StatementList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Statement(entry, context);
    });
    return retVal;
};
const de_StringColumnStatisticsData = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AverageLength: smithy_client_1.limitedParseDouble,
        MaximumLength: smithy_client_1.expectLong,
        NumberOfDistinctValues: smithy_client_1.expectLong,
        NumberOfNulls: smithy_client_1.expectLong,
    });
};
const de_Table = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogId: smithy_client_1.expectString,
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CreatedBy: smithy_client_1.expectString,
        DatabaseName: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        FederatedTable: smithy_client_1._json,
        IsRegisteredWithLakeFormation: smithy_client_1.expectBoolean,
        LastAccessTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastAnalyzedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Owner: smithy_client_1.expectString,
        Parameters: smithy_client_1._json,
        PartitionKeys: smithy_client_1._json,
        Retention: smithy_client_1.expectInt32,
        StorageDescriptor: smithy_client_1._json,
        TableType: smithy_client_1.expectString,
        TargetTable: smithy_client_1._json,
        UpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        VersionId: smithy_client_1.expectString,
        ViewExpandedText: smithy_client_1.expectString,
        ViewOriginalText: smithy_client_1.expectString,
    });
};
const de_TableList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Table(entry, context);
    });
    return retVal;
};
const de_TableOptimizer = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        configuration: smithy_client_1._json,
        lastRun: (_) => de_TableOptimizerRun(_, context),
        type: smithy_client_1.expectString,
    });
};
const de_TableOptimizerRun = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        endTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        error: smithy_client_1.expectString,
        eventType: smithy_client_1.expectString,
        metrics: smithy_client_1._json,
        startTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_TableOptimizerRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TableOptimizerRun(entry, context);
    });
    return retVal;
};
const de_TableVersion = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Table: (_) => de_Table(_, context),
        VersionId: smithy_client_1.expectString,
    });
};
const de_TaskRun = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorString: smithy_client_1.expectString,
        ExecutionTime: smithy_client_1.expectInt32,
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LogGroupName: smithy_client_1.expectString,
        Properties: smithy_client_1._json,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        TaskRunId: smithy_client_1.expectString,
        TransformId: smithy_client_1.expectString,
    });
};
const de_TaskRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TaskRun(entry, context);
    });
    return retVal;
};
const de_TransformList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MLTransform(entry, context);
    });
    return retVal;
};
const de_TransformParameters = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FindMatchesParameters: (_) => de_FindMatchesParameters(_, context),
        TransformType: smithy_client_1.expectString,
    });
};
const de_UnfilteredPartition = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AuthorizedColumns: smithy_client_1._json,
        IsRegisteredWithLakeFormation: smithy_client_1.expectBoolean,
        Partition: (_) => de_Partition(_, context),
    });
};
const de_UnfilteredPartitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnfilteredPartition(entry, context);
    });
    return retVal;
};
const de_UpdateColumnStatisticsForPartitionResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Errors: (_) => de_ColumnStatisticsErrors(_, context),
    });
};
const de_UpdateColumnStatisticsForTableResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Errors: (_) => de_ColumnStatisticsErrors(_, context),
    });
};
const de_UserDefinedFunction = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CatalogId: smithy_client_1.expectString,
        ClassName: smithy_client_1.expectString,
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DatabaseName: smithy_client_1.expectString,
        FunctionName: smithy_client_1.expectString,
        OwnerName: smithy_client_1.expectString,
        OwnerType: smithy_client_1.expectString,
        ResourceUris: smithy_client_1._json,
    });
};
const de_UserDefinedFunctionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserDefinedFunction(entry, context);
    });
    return retVal;
};
const de_Workflow = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BlueprintDetails: smithy_client_1._json,
        CreatedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DefaultRunProperties: smithy_client_1._json,
        Description: smithy_client_1.expectString,
        Graph: (_) => de_WorkflowGraph(_, context),
        LastModifiedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastRun: (_) => de_WorkflowRun(_, context),
        MaxConcurrentRuns: smithy_client_1.expectInt32,
        Name: smithy_client_1.expectString,
    });
};
const de_WorkflowGraph = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Edges: smithy_client_1._json,
        Nodes: (_) => de_NodeList(_, context),
    });
};
const de_WorkflowRun = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CompletedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorMessage: smithy_client_1.expectString,
        Graph: (_) => de_WorkflowGraph(_, context),
        Name: smithy_client_1.expectString,
        PreviousRunId: smithy_client_1.expectString,
        StartedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StartingEventBatchCondition: smithy_client_1._json,
        Statistics: smithy_client_1._json,
        Status: smithy_client_1.expectString,
        WorkflowRunId: smithy_client_1.expectString,
        WorkflowRunProperties: smithy_client_1._json,
    });
};
const de_WorkflowRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkflowRun(entry, context);
    });
    return retVal;
};
const de_Workflows = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Workflow(entry, context);
    });
    return retVal;
};
const de_XMLClassifier = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Classification: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        RowTag: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(GlueServiceException_1.GlueServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSGlue.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
